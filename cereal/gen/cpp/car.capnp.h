// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: car.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9b1657f34caf3ad3);
CAPNP_DECLARE_SCHEMA(baa8c5d505f727de);
enum class EventName_baa8c5d505f727de: uint16_t {
  CAN_ERROR,
  STEER_UNAVAILABLE,
  BRAKE_UNAVAILABLE,
  GAS_UNAVAILABLE_D_E_P_R_E_C_A_T_E_D,
  WRONG_GEAR,
  DOOR_OPEN,
  SEATBELT_NOT_LATCHED,
  ESP_DISABLED,
  WRONG_CAR_MODE,
  STEER_TEMP_UNAVAILABLE,
  REVERSE_GEAR,
  BUTTON_CANCEL,
  BUTTON_ENABLE,
  PEDAL_PRESSED,
  CRUISE_DISABLED,
  RADAR_CAN_ERROR_D_E_P_R_E_C_A_T_E_D,
  DATA_NEEDED_D_E_P_R_E_C_A_T_E_D,
  SPEED_TOO_LOW,
  OUT_OF_SPACE,
  OVERHEAT,
  CALIBRATION_INCOMPLETE,
  CALIBRATION_INVALID,
  CONTROLS_MISMATCH,
  PCM_ENABLE,
  PCM_DISABLE,
  NO_TARGET,
  RADAR_FAULT,
  MODEL_COMM_ISSUE_D_E_P_R_E_C_A_T_E_D,
  BRAKE_HOLD,
  PARK_BRAKE,
  MANUAL_RESTART,
  LOW_SPEED_LOCKOUT,
  PLANNER_ERROR,
  IPAS_OVERRIDE_D_E_P_R_E_C_A_T_E_D,
  JOYSTICK_DEBUG,
  STEER_TEMP_UNAVAILABLE_SILENT,
  RESUME_REQUIRED,
  PRE_DRIVER_DISTRACTED,
  PROMPT_DRIVER_DISTRACTED,
  DRIVER_DISTRACTED,
  GEOFENCE_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_ON_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_OFF_D_E_P_R_E_C_A_T_E_D,
  PRE_DRIVER_UNRESPONSIVE,
  PROMPT_DRIVER_UNRESPONSIVE,
  DRIVER_UNRESPONSIVE,
  BELOW_STEER_SPEED,
  CALIBRATION_PROGRESS_D_E_P_R_E_C_A_T_E_D,
  LOW_BATTERY,
  INVALID_GIRAFFE_HONDA_D_E_P_R_E_C_A_T_E_D,
  VEHICLE_MODEL_INVALID,
  ACC_FAULTED,
  SENSOR_DATA_INVALID,
  COMM_ISSUE,
  TOO_DISTRACTED,
  POSENET_INVALID,
  SOUNDS_UNAVAILABLE,
  PRE_LANE_CHANGE_LEFT,
  PRE_LANE_CHANGE_RIGHT,
  LANE_CHANGE,
  INVALID_GIRAFFE_TOYOTA_D_E_P_R_E_C_A_T_E_D,
  INTERNET_CONNECTIVITY_NEEDED_D_E_P_R_E_C_A_T_E_D,
  COMMUNITY_FEATURE_DISALLOWED_D_E_P_R_E_C_A_T_E_D,
  LOW_MEMORY,
  STOCK_AEB,
  LDW,
  CAR_UNRECOGNIZED,
  RADAR_COMM_ISSUE_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_LOW_ACC_D_E_P_R_E_C_A_T_E_D,
  INVALID_LKAS_SETTING,
  SPEED_TOO_HIGH,
  LANE_CHANGE_BLOCKED,
  RELAY_MALFUNCTION,
  GAS_PRESSED,
  STOCK_FCW,
  STARTUP,
  STARTUP_NO_CAR,
  STARTUP_NO_CONTROL,
  STARTUP_MASTER,
  FCW,
  STEER_SATURATED,
  WHITE_PANDA_UNSUPPORTED_D_E_P_R_E_C_A_T_E_D,
  STARTUP_ONEPLUS_D_E_P_R_E_C_A_T_E_D,
  COMM_ISSUE_WARNING_D_E_P_R_E_C_A_T_E_D,
  BELOW_ENGAGE_SPEED,
  NO_GPS,
  FOCUS_RECOVER_ACTIVE_D_E_P_R_E_C_A_T_E_D,
  WRONG_CRUISE_MODE,
  NEOS_UPDATE_REQUIRED_D_E_P_R_E_C_A_T_E_D,
  MODELD_LAGGING,
  DEVICE_FALLING,
  FAN_MALFUNCTION,
  CAMERA_MALFUNCTION,
  MODEL_LAG_WARNING_D_E_P_R_E_C_A_T_E_D,
  GPS_MALFUNCTION,
  PROCESS_NOT_RUNNING,
  DASHCAM_MODE,
  STARTUP_FUZZY_FINGERPRINT_D_E_P_R_E_C_A_T_E_D,
  CONTROLS_INITIALIZING,
  USB_ERROR,
  ROAD_CAMERA_ERROR,
  DRIVER_CAMERA_ERROR,
  WIDE_ROAD_CAMERA_ERROR,
  LOCALIZER_MALFUNCTION,
  STARTUP_NO_FW,
  HIGH_CPU_USAGE,
  CRUISE_MISMATCH,
  LKAS_DISABLED,
};
CAPNP_DECLARE_ENUM(EventName, baa8c5d505f727de);
CAPNP_DECLARE_SCHEMA(9da4fa09e052903c);
CAPNP_DECLARE_SCHEMA(aefc75e08bece315);
CAPNP_DECLARE_SCHEMA(f2ccdc7776e477f5);
CAPNP_DECLARE_SCHEMA(86c6ba48e845405a);
CAPNP_DECLARE_SCHEMA(f5da88e18f86497b);
CAPNP_DECLARE_SCHEMA(ba41ba322dd3aff8);
CAPNP_DECLARE_SCHEMA(d8143795ef12e1f4);
CAPNP_DECLARE_SCHEMA(dfe2c7077f393cc7);
CAPNP_DECLARE_SCHEMA(f2e6e2ba4eb71e19);
CAPNP_DECLARE_SCHEMA(c0b2eec86020e4fa);
CAPNP_DECLARE_SCHEMA(991a37a6155935a3);
CAPNP_DECLARE_SCHEMA(e64e81478e6e60af);
CAPNP_DECLARE_SCHEMA(e004ca45136f6a89);
enum class GearShifter_e004ca45136f6a89: uint16_t {
  UNKNOWN,
  PARK,
  DRIVE,
  NEUTRAL,
  REVERSE,
  SPORT,
  LOW,
  BRAKE,
  ECO,
  MANUMATIC,
};
CAPNP_DECLARE_ENUM(GearShifter, e004ca45136f6a89);
CAPNP_DECLARE_SCHEMA(ff5ca6835b4acef6);
CAPNP_DECLARE_SCHEMA(e16100205414717c);
enum class Type_e16100205414717c: uint16_t {
  UNKNOWN,
  LEFT_BLINKER,
  RIGHT_BLINKER,
  ACCEL_CRUISE,
  DECEL_CRUISE,
  CANCEL,
  ALT_BUTTON1,
  ALT_BUTTON2,
  ALT_BUTTON3,
  SET_CRUISE,
  RESUME_CRUISE,
  GAP_ADJUST_CRUISE,
};
CAPNP_DECLARE_ENUM(Type, e16100205414717c);
CAPNP_DECLARE_SCHEMA(888ad6581cf0aacb);
CAPNP_DECLARE_SCHEMA(e8a86679ebba76ad);
enum class Error_e8a86679ebba76ad: uint16_t {
  CAN_ERROR,
  FAULT,
  WRONG_CONFIG,
};
CAPNP_DECLARE_ENUM(Error, e8a86679ebba76ad);
CAPNP_DECLARE_SCHEMA(8ff333ebac1fdf36);
CAPNP_DECLARE_SCHEMA(f78829049ab814af);
CAPNP_DECLARE_SCHEMA(e97275a919432828);
CAPNP_DECLARE_SCHEMA(e40f3a917d908282);
enum class LongControlState_e40f3a917d908282: uint16_t {
  OFF,
  PID,
  STOPPING,
  STARTING_D_E_P_R_E_C_A_T_E_D,
};
CAPNP_DECLARE_ENUM(LongControlState, e40f3a917d908282);
CAPNP_DECLARE_SCHEMA(b20e386e0e0ba8d3);
CAPNP_DECLARE_SCHEMA(d895c87c4eb03a38);
CAPNP_DECLARE_SCHEMA(90d78e84616e17d4);
enum class VisualAlert_90d78e84616e17d4: uint16_t {
  NONE,
  FCW,
  STEER_REQUIRED,
  BRAKE_PRESSED,
  WRONG_GEAR,
  SEATBELT_UNBUCKLED,
  SPEED_TOO_HIGH,
  LDW,
};
CAPNP_DECLARE_ENUM(VisualAlert, 90d78e84616e17d4);
CAPNP_DECLARE_SCHEMA(f5a5e26c954e339e);
enum class AudibleAlert_f5a5e26c954e339e: uint16_t {
  NONE,
  ENGAGE,
  DISENGAGE,
  REFUSE,
  WARNING_SOFT,
  WARNING_IMMEDIATE,
  PROMPT,
  PROMPT_REPEAT,
  PROMPT_DISTRACTED,
  LEFT_BLINDSPOT,
  RIGHT_BLINDSPOT,
  LEAD_CAR_GOING,
  NO_LEAD_CAR_WARNING,
  LEFT_CUT_IN,
  RIGHT_CUT_IN,
  SPEED_LIMIT30_KM,
  SPEED_LIMIT40_KM,
  SPEED_LIMIT50_KM,
  SPEED_LIMIT60_KM,
  SPEED_LIMIT70_KM,
  SPEED_LIMIT80_KM,
  SPEED_LIMIT90_KM,
  SPEED_LIMIT100_KM,
  SPEED_LIMIT110_KM,
  LEFT_BLINKER,
  RIGHT_BLINKER,
  LEAD_CAR_HEAVY_BRAKE,
  VOICE_TEST,
};
CAPNP_DECLARE_ENUM(AudibleAlert, f5a5e26c954e339e);
CAPNP_DECLARE_SCHEMA(8c69372490aaa9da);
CAPNP_DECLARE_SCHEMA(e836349c6056b0c9);
CAPNP_DECLARE_SCHEMA(b581b23b1c89dda3);
CAPNP_DECLARE_SCHEMA(9622723fcbd14c2e);
CAPNP_DECLARE_SCHEMA(c342cefc303e9b8e);
CAPNP_DECLARE_SCHEMA(a334472e045533b3);
CAPNP_DECLARE_SCHEMA(9d151e3f28616a12);
CAPNP_DECLARE_SCHEMA(95551e5b1edaf451);
enum class SafetyModel_95551e5b1edaf451: uint16_t {
  SILENT,
  HONDA_NIDEC,
  TOYOTA,
  ELM327,
  GM,
  HONDA_BOSCH_GIRAFFE,
  FORD,
  CADILLAC,
  HYUNDAI,
  CHRYSLER,
  TESLA,
  SUBARU,
  GM_PASSIVE,
  MAZDA,
  NISSAN,
  VOLKSWAGEN,
  TOYOTA_IPAS,
  ALL_OUTPUT,
  GM_ASCM,
  NO_OUTPUT,
  HONDA_BOSCH,
  VOLKSWAGEN_PQ,
  SUBARU_LEGACY,
  HYUNDAI_LEGACY,
  HYUNDAI_COMMUNITY,
  STELLANTIS,
};
CAPNP_DECLARE_ENUM(SafetyModel, 95551e5b1edaf451);
CAPNP_DECLARE_SCHEMA(d661512be2def77f);
enum class SteerControlType_d661512be2def77f: uint16_t {
  TORQUE,
  ANGLE,
};
CAPNP_DECLARE_ENUM(SteerControlType, d661512be2def77f);
CAPNP_DECLARE_SCHEMA(8f162eeb14bfc0ec);
enum class TransmissionType_8f162eeb14bfc0ec: uint16_t {
  UNKNOWN,
  AUTOMATIC,
  MANUAL,
  DIRECT,
  CVT,
};
CAPNP_DECLARE_ENUM(TransmissionType, 8f162eeb14bfc0ec);
CAPNP_DECLARE_SCHEMA(962b56180c9359ce);
CAPNP_DECLARE_SCHEMA(f7119bb759d1d691);
enum class Ecu_f7119bb759d1d691: uint16_t {
  EPS,
  ESP,
  FWD_RADAR,
  FWD_CAMERA,
  ENGINE,
  UNKNOWN,
  DSU,
  APGS,
  TRANSMISSION,
  SRS,
  GATEWAY,
  HUD,
  COMBINATION_METER,
  VSA,
  PROGRAMMED_FUEL_INJECTION,
  ELECTRIC_BRAKE_BOOSTER,
  SHIFT_BY_WIRE,
};
CAPNP_DECLARE_ENUM(Ecu, f7119bb759d1d691);
CAPNP_DECLARE_SCHEMA(9fd95523d8dc40ce);
enum class FingerprintSource_9fd95523d8dc40ce: uint16_t {
  CAN,
  FW,
  FIXED,
};
CAPNP_DECLARE_ENUM(FingerprintSource, 9fd95523d8dc40ce);
CAPNP_DECLARE_SCHEMA(ff99e3682a833c51);
enum class NetworkLocation_ff99e3682a833c51: uint16_t {
  FWD_CAMERA,
  GATEWAY,
};
CAPNP_DECLARE_ENUM(NetworkLocation, ff99e3682a833c51);
CAPNP_DECLARE_SCHEMA(93fc580a35339568);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct CarEvent {
  CarEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventName_baa8c5d505f727de EventName;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b1657f34caf3ad3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState {
  CarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct VagAcc;
  struct VagAcc02;
  struct VagAcc04;
  struct VagAcc06;
  struct VagAcc07;
  struct VagAcc10;
  struct VagGraAcc01;
  struct VagTsr;
  struct VagTemperatureInfo;
  struct WheelSpeeds;
  struct CruiseState;
  typedef ::capnp::schemas::GearShifter_e004ca45136f6a89 GearShifter;

  struct ButtonEvent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da4fa09e052903c, 7, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc {
  VagAcc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aefc75e08bece315, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc02 {
  VagAcc02() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2ccdc7776e477f5, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc04 {
  VagAcc04() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86c6ba48e845405a, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc06 {
  VagAcc06() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5da88e18f86497b, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc07 {
  VagAcc07() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba41ba322dd3aff8, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagAcc10 {
  VagAcc10() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8143795ef12e1f4, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagGraAcc01 {
  VagGraAcc01() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfe2c7077f393cc7, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagTsr {
  VagTsr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2e6e2ba4eb71e19, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::VagTemperatureInfo {
  VagTemperatureInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0b2eec86020e4fa, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::WheelSpeeds {
  WheelSpeeds() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(991a37a6155935a3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::CruiseState {
  CruiseState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e64e81478e6e60af, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::ButtonEvent {
  ButtonEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e16100205414717c Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff5ca6835b4acef6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData {
  RadarData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Error_e8a86679ebba76ad Error;

  struct RadarPoint;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888ad6581cf0aacb, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData::RadarPoint {
  RadarPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ff333ebac1fdf36, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl {
  CarControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Actuators;
  struct CruiseControl;
  struct HUDControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f78829049ab814af, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::Actuators {
  Actuators() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LongControlState_e40f3a917d908282 LongControlState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e97275a919432828, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::CruiseControl {
  CruiseControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b20e386e0e0ba8d3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::HUDControl {
  HUDControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VisualAlert_90d78e84616e17d4 VisualAlert;

  typedef ::capnp::schemas::AudibleAlert_f5a5e26c954e339e AudibleAlert;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d895c87c4eb03a38, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams {
  CarParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SafetyConfig;
  struct LateralParams;
  struct LateralPIDTuning;
  struct LongitudinalPIDTuning;
  struct LateralINDITuning;
  struct LateralLQRTuning;
  typedef ::capnp::schemas::SafetyModel_95551e5b1edaf451 SafetyModel;

  typedef ::capnp::schemas::SteerControlType_d661512be2def77f SteerControlType;

  typedef ::capnp::schemas::TransmissionType_8f162eeb14bfc0ec TransmissionType;

  struct CarFw;
  typedef ::capnp::schemas::Ecu_f7119bb759d1d691 Ecu;

  typedef ::capnp::schemas::FingerprintSource_9fd95523d8dc40ce FingerprintSource;

  typedef ::capnp::schemas::NetworkLocation_ff99e3682a833c51 NetworkLocation;

  struct LateralTuning;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c69372490aaa9da, 16, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::SafetyConfig {
  SafetyConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e836349c6056b0c9, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralParams {
  LateralParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b581b23b1c89dda3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralPIDTuning {
  LateralPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9622723fcbd14c2e, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LongitudinalPIDTuning {
  LongitudinalPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c342cefc303e9b8e, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralINDITuning {
  LateralINDITuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a334472e045533b3, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralLQRTuning {
  LateralLQRTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d151e3f28616a12, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::CarFw {
  CarFw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(962b56180c9359ce, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralTuning {
  LateralTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PID,
    INDI,
    LQR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93fc580a35339568, 16, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CarEvent::Reader {
public:
  typedef CarEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarEvent::EventName getName() const;

  inline bool getEnable() const;

  inline bool getNoEntry() const;

  inline bool getWarning() const;

  inline bool getUserDisable() const;

  inline bool getSoftDisable() const;

  inline bool getImmediateDisable() const;

  inline bool getPreEnable() const;

  inline bool getPermanent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarEvent::Builder {
public:
  typedef CarEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarEvent::EventName getName();
  inline void setName( ::cereal::CarEvent::EventName value);

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getNoEntry();
  inline void setNoEntry(bool value);

  inline bool getWarning();
  inline void setWarning(bool value);

  inline bool getUserDisable();
  inline void setUserDisable(bool value);

  inline bool getSoftDisable();
  inline void setSoftDisable(bool value);

  inline bool getImmediateDisable();
  inline void setImmediateDisable(bool value);

  inline bool getPreEnable();
  inline void setPreEnable(bool value);

  inline bool getPermanent();
  inline void setPermanent(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarEvent::Pipeline {
public:
  typedef CarEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::Reader {
public:
  typedef CarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Reader getErrorsDEPRECATED() const;

  inline float getVEgo() const;

  inline bool hasWheelSpeeds() const;
  inline  ::cereal::CarState::WheelSpeeds::Reader getWheelSpeeds() const;

  inline float getGas() const;

  inline bool getGasPressed() const;

  inline float getBrake() const;

  inline bool getBrakePressed() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringTorque() const;

  inline bool getSteeringPressed() const;

  inline bool hasCruiseState() const;
  inline  ::cereal::CarState::CruiseState::Reader getCruiseState() const;

  inline bool hasButtonEvents() const;
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader getButtonEvents() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimes() const;

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader getEvents() const;

  inline  ::cereal::CarState::GearShifter getGearShifter() const;

  inline float getSteeringRateDeg() const;

  inline float getAEgo() const;

  inline float getVEgoRaw() const;

  inline bool getStandstill() const;

  inline bool getBrakeLights() const;

  inline bool getLeftBlinker() const;

  inline bool getRightBlinker() const;

  inline float getYawRate() const;

  inline bool getGenericToggle() const;

  inline bool getDoorOpen() const;

  inline bool getSeatbeltUnlatched() const;

  inline bool getCanValid() const;

  inline float getSteeringTorqueEps() const;

  inline bool getClutchPressed() const;

  inline bool getSteeringRateLimited() const;

  inline bool getStockAeb() const;

  inline bool getStockFcw() const;

  inline bool getEspDisabled() const;

  inline bool getLeftBlindspot() const;

  inline bool getRightBlindspot() const;

  inline bool getSteerWarning() const;

  inline bool getSteerError() const;

  inline float getSteeringAngleOffsetDeg() const;

  inline bool getBrakeHoldActive() const;

  inline bool getLeftBlindspotWarning() const;

  inline bool getRightBlindspotWarning() const;

  inline bool hasVagAcc() const;
  inline  ::cereal::CarState::VagAcc::Reader getVagAcc() const;

  inline bool hasVagTsr() const;
  inline  ::cereal::CarState::VagTsr::Reader getVagTsr() const;

  inline bool hasVagTemperatureInfo() const;
  inline  ::cereal::CarState::VagTemperatureInfo::Reader getVagTemperatureInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::Builder {
public:
  typedef CarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED();
  inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Builder getErrorsDEPRECATED();
  inline void setErrorsDEPRECATED( ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Reader value);
  inline void setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::CarEvent::EventName> value);
  inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Builder initErrorsDEPRECATED(unsigned int size);
  inline void adoptErrorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>> disownErrorsDEPRECATED();

  inline float getVEgo();
  inline void setVEgo(float value);

  inline bool hasWheelSpeeds();
  inline  ::cereal::CarState::WheelSpeeds::Builder getWheelSpeeds();
  inline void setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value);
  inline  ::cereal::CarState::WheelSpeeds::Builder initWheelSpeeds();
  inline void adoptWheelSpeeds(::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> disownWheelSpeeds();

  inline float getGas();
  inline void setGas(float value);

  inline bool getGasPressed();
  inline void setGasPressed(bool value);

  inline float getBrake();
  inline void setBrake(float value);

  inline bool getBrakePressed();
  inline void setBrakePressed(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringTorque();
  inline void setSteeringTorque(float value);

  inline bool getSteeringPressed();
  inline void setSteeringPressed(bool value);

  inline bool hasCruiseState();
  inline  ::cereal::CarState::CruiseState::Builder getCruiseState();
  inline void setCruiseState( ::cereal::CarState::CruiseState::Reader value);
  inline  ::cereal::CarState::CruiseState::Builder initCruiseState();
  inline void adoptCruiseState(::capnp::Orphan< ::cereal::CarState::CruiseState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::CruiseState> disownCruiseState();

  inline bool hasButtonEvents();
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder getButtonEvents();
  inline void setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder initButtonEvents(unsigned int size);
  inline void adoptButtonEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>> disownButtonEvents();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimes();

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> disownEvents();

  inline  ::cereal::CarState::GearShifter getGearShifter();
  inline void setGearShifter( ::cereal::CarState::GearShifter value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getAEgo();
  inline void setAEgo(float value);

  inline float getVEgoRaw();
  inline void setVEgoRaw(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

  inline bool getBrakeLights();
  inline void setBrakeLights(bool value);

  inline bool getLeftBlinker();
  inline void setLeftBlinker(bool value);

  inline bool getRightBlinker();
  inline void setRightBlinker(bool value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline bool getGenericToggle();
  inline void setGenericToggle(bool value);

  inline bool getDoorOpen();
  inline void setDoorOpen(bool value);

  inline bool getSeatbeltUnlatched();
  inline void setSeatbeltUnlatched(bool value);

  inline bool getCanValid();
  inline void setCanValid(bool value);

  inline float getSteeringTorqueEps();
  inline void setSteeringTorqueEps(float value);

  inline bool getClutchPressed();
  inline void setClutchPressed(bool value);

  inline bool getSteeringRateLimited();
  inline void setSteeringRateLimited(bool value);

  inline bool getStockAeb();
  inline void setStockAeb(bool value);

  inline bool getStockFcw();
  inline void setStockFcw(bool value);

  inline bool getEspDisabled();
  inline void setEspDisabled(bool value);

  inline bool getLeftBlindspot();
  inline void setLeftBlindspot(bool value);

  inline bool getRightBlindspot();
  inline void setRightBlindspot(bool value);

  inline bool getSteerWarning();
  inline void setSteerWarning(bool value);

  inline bool getSteerError();
  inline void setSteerError(bool value);

  inline float getSteeringAngleOffsetDeg();
  inline void setSteeringAngleOffsetDeg(float value);

  inline bool getBrakeHoldActive();
  inline void setBrakeHoldActive(bool value);

  inline bool getLeftBlindspotWarning();
  inline void setLeftBlindspotWarning(bool value);

  inline bool getRightBlindspotWarning();
  inline void setRightBlindspotWarning(bool value);

  inline bool hasVagAcc();
  inline  ::cereal::CarState::VagAcc::Builder getVagAcc();
  inline void setVagAcc( ::cereal::CarState::VagAcc::Reader value);
  inline  ::cereal::CarState::VagAcc::Builder initVagAcc();
  inline void adoptVagAcc(::capnp::Orphan< ::cereal::CarState::VagAcc>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc> disownVagAcc();

  inline bool hasVagTsr();
  inline  ::cereal::CarState::VagTsr::Builder getVagTsr();
  inline void setVagTsr( ::cereal::CarState::VagTsr::Reader value);
  inline  ::cereal::CarState::VagTsr::Builder initVagTsr();
  inline void adoptVagTsr(::capnp::Orphan< ::cereal::CarState::VagTsr>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagTsr> disownVagTsr();

  inline bool hasVagTemperatureInfo();
  inline  ::cereal::CarState::VagTemperatureInfo::Builder getVagTemperatureInfo();
  inline void setVagTemperatureInfo( ::cereal::CarState::VagTemperatureInfo::Reader value);
  inline  ::cereal::CarState::VagTemperatureInfo::Builder initVagTemperatureInfo();
  inline void adoptVagTemperatureInfo(::capnp::Orphan< ::cereal::CarState::VagTemperatureInfo>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagTemperatureInfo> disownVagTemperatureInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::Pipeline {
public:
  typedef CarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarState::WheelSpeeds::Pipeline getWheelSpeeds();
  inline  ::cereal::CarState::CruiseState::Pipeline getCruiseState();
  inline  ::cereal::CarState::VagAcc::Pipeline getVagAcc();
  inline  ::cereal::CarState::VagTsr::Pipeline getVagTsr();
  inline  ::cereal::CarState::VagTemperatureInfo::Pipeline getVagTemperatureInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc::Reader {
public:
  typedef VagAcc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVagAcc02() const;
  inline  ::cereal::CarState::VagAcc02::Reader getVagAcc02() const;

  inline bool hasVagAcc04() const;
  inline  ::cereal::CarState::VagAcc04::Reader getVagAcc04() const;

  inline bool hasVagAcc06() const;
  inline  ::cereal::CarState::VagAcc06::Reader getVagAcc06() const;

  inline bool hasVagAcc07() const;
  inline  ::cereal::CarState::VagAcc07::Reader getVagAcc07() const;

  inline bool hasVagAcc10() const;
  inline  ::cereal::CarState::VagAcc10::Reader getVagAcc10() const;

  inline bool hasVagGraAcc01() const;
  inline  ::cereal::CarState::VagGraAcc01::Reader getVagGraAcc01() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc::Builder {
public:
  typedef VagAcc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVagAcc02();
  inline  ::cereal::CarState::VagAcc02::Builder getVagAcc02();
  inline void setVagAcc02( ::cereal::CarState::VagAcc02::Reader value);
  inline  ::cereal::CarState::VagAcc02::Builder initVagAcc02();
  inline void adoptVagAcc02(::capnp::Orphan< ::cereal::CarState::VagAcc02>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc02> disownVagAcc02();

  inline bool hasVagAcc04();
  inline  ::cereal::CarState::VagAcc04::Builder getVagAcc04();
  inline void setVagAcc04( ::cereal::CarState::VagAcc04::Reader value);
  inline  ::cereal::CarState::VagAcc04::Builder initVagAcc04();
  inline void adoptVagAcc04(::capnp::Orphan< ::cereal::CarState::VagAcc04>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc04> disownVagAcc04();

  inline bool hasVagAcc06();
  inline  ::cereal::CarState::VagAcc06::Builder getVagAcc06();
  inline void setVagAcc06( ::cereal::CarState::VagAcc06::Reader value);
  inline  ::cereal::CarState::VagAcc06::Builder initVagAcc06();
  inline void adoptVagAcc06(::capnp::Orphan< ::cereal::CarState::VagAcc06>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc06> disownVagAcc06();

  inline bool hasVagAcc07();
  inline  ::cereal::CarState::VagAcc07::Builder getVagAcc07();
  inline void setVagAcc07( ::cereal::CarState::VagAcc07::Reader value);
  inline  ::cereal::CarState::VagAcc07::Builder initVagAcc07();
  inline void adoptVagAcc07(::capnp::Orphan< ::cereal::CarState::VagAcc07>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc07> disownVagAcc07();

  inline bool hasVagAcc10();
  inline  ::cereal::CarState::VagAcc10::Builder getVagAcc10();
  inline void setVagAcc10( ::cereal::CarState::VagAcc10::Reader value);
  inline  ::cereal::CarState::VagAcc10::Builder initVagAcc10();
  inline void adoptVagAcc10(::capnp::Orphan< ::cereal::CarState::VagAcc10>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagAcc10> disownVagAcc10();

  inline bool hasVagGraAcc01();
  inline  ::cereal::CarState::VagGraAcc01::Builder getVagGraAcc01();
  inline void setVagGraAcc01( ::cereal::CarState::VagGraAcc01::Reader value);
  inline  ::cereal::CarState::VagGraAcc01::Builder initVagGraAcc01();
  inline void adoptVagGraAcc01(::capnp::Orphan< ::cereal::CarState::VagGraAcc01>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::VagGraAcc01> disownVagGraAcc01();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc::Pipeline {
public:
  typedef VagAcc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarState::VagAcc02::Pipeline getVagAcc02();
  inline  ::cereal::CarState::VagAcc04::Pipeline getVagAcc04();
  inline  ::cereal::CarState::VagAcc06::Pipeline getVagAcc06();
  inline  ::cereal::CarState::VagAcc07::Pipeline getVagAcc07();
  inline  ::cereal::CarState::VagAcc10::Pipeline getVagAcc10();
  inline  ::cereal::CarState::VagGraAcc01::Pipeline getVagGraAcc01();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc02::Reader {
public:
  typedef VagAcc02 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAccWunschgeschw() const;

  inline  ::int32_t getAccStatusPrimAnz() const;

  inline  ::int32_t getAccAbstandsindex() const;

  inline  ::int32_t getAccAkustik() const;

  inline  ::int32_t getAccGesetzteZeitluecke() const;

  inline bool getAccOptischerFahrerhinweis() const;

  inline bool getAccTypTachokranz() const;

  inline bool getAccAnzeigeZeitluecke() const;

  inline bool getAccTachokranz() const;

  inline bool getAccDisplayPrio() const;

  inline  ::int32_t getAccRelevantesObjekt() const;

  inline  ::int32_t getAccTextePrimaeranz() const;

  inline bool getAccWunschgeschwErreicht() const;

  inline  ::int32_t getAccStatusAnzeige() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc02::Builder {
public:
  typedef VagAcc02 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAccWunschgeschw();
  inline void setAccWunschgeschw(float value);

  inline  ::int32_t getAccStatusPrimAnz();
  inline void setAccStatusPrimAnz( ::int32_t value);

  inline  ::int32_t getAccAbstandsindex();
  inline void setAccAbstandsindex( ::int32_t value);

  inline  ::int32_t getAccAkustik();
  inline void setAccAkustik( ::int32_t value);

  inline  ::int32_t getAccGesetzteZeitluecke();
  inline void setAccGesetzteZeitluecke( ::int32_t value);

  inline bool getAccOptischerFahrerhinweis();
  inline void setAccOptischerFahrerhinweis(bool value);

  inline bool getAccTypTachokranz();
  inline void setAccTypTachokranz(bool value);

  inline bool getAccAnzeigeZeitluecke();
  inline void setAccAnzeigeZeitluecke(bool value);

  inline bool getAccTachokranz();
  inline void setAccTachokranz(bool value);

  inline bool getAccDisplayPrio();
  inline void setAccDisplayPrio(bool value);

  inline  ::int32_t getAccRelevantesObjekt();
  inline void setAccRelevantesObjekt( ::int32_t value);

  inline  ::int32_t getAccTextePrimaeranz();
  inline void setAccTextePrimaeranz( ::int32_t value);

  inline bool getAccWunschgeschwErreicht();
  inline void setAccWunschgeschwErreicht(bool value);

  inline  ::int32_t getAccStatusAnzeige();
  inline void setAccStatusAnzeige( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc02::Pipeline {
public:
  typedef VagAcc02 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc04::Reader {
public:
  typedef VagAcc04 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccTexteZusatzanz() const;

  inline  ::int32_t getAccStatusZusatzanz() const;

  inline  ::int32_t getAccTexte() const;

  inline  ::int32_t getAccTexteBrakingGuard() const;

  inline bool getAccWarnhinweis() const;

  inline float getAccGeschwZielfahrzeug() const;

  inline  ::int32_t getAccCharismaFahrPr() const;

  inline  ::int32_t getAccCharismaStatus() const;

  inline  ::int32_t getAccCharismaUmschaltung() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc04::Builder {
public:
  typedef VagAcc04 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccTexteZusatzanz();
  inline void setAccTexteZusatzanz( ::int32_t value);

  inline  ::int32_t getAccStatusZusatzanz();
  inline void setAccStatusZusatzanz( ::int32_t value);

  inline  ::int32_t getAccTexte();
  inline void setAccTexte( ::int32_t value);

  inline  ::int32_t getAccTexteBrakingGuard();
  inline void setAccTexteBrakingGuard( ::int32_t value);

  inline bool getAccWarnhinweis();
  inline void setAccWarnhinweis(bool value);

  inline float getAccGeschwZielfahrzeug();
  inline void setAccGeschwZielfahrzeug(float value);

  inline  ::int32_t getAccCharismaFahrPr();
  inline void setAccCharismaFahrPr( ::int32_t value);

  inline  ::int32_t getAccCharismaStatus();
  inline void setAccCharismaStatus( ::int32_t value);

  inline  ::int32_t getAccCharismaUmschaltung();
  inline void setAccCharismaUmschaltung( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc04::Pipeline {
public:
  typedef VagAcc04 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc06::Reader {
public:
  typedef VagAcc06 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getAccLimitierteAnfahrdyn() const;

  inline float getAccZulRegelabwUnten() const;

  inline  ::int32_t getAccStartStoppInfo() const;

  inline float getAccSollbeschleunigung02() const;

  inline float getAccZulRegelabwOben() const;

  inline float getAccNegSollbeschlGrad02() const;

  inline float getAccPosSollbeschlGrad02() const;

  inline bool getAccAnfahren() const;

  inline bool getAccAnhalten() const;

  inline  ::int32_t getAccTyp() const;

  inline  ::int32_t getAccStatusAcc() const;

  inline bool getAccMinimaleBremsung() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc06::Builder {
public:
  typedef VagAcc06 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getAccLimitierteAnfahrdyn();
  inline void setAccLimitierteAnfahrdyn(bool value);

  inline float getAccZulRegelabwUnten();
  inline void setAccZulRegelabwUnten(float value);

  inline  ::int32_t getAccStartStoppInfo();
  inline void setAccStartStoppInfo( ::int32_t value);

  inline float getAccSollbeschleunigung02();
  inline void setAccSollbeschleunigung02(float value);

  inline float getAccZulRegelabwOben();
  inline void setAccZulRegelabwOben(float value);

  inline float getAccNegSollbeschlGrad02();
  inline void setAccNegSollbeschlGrad02(float value);

  inline float getAccPosSollbeschlGrad02();
  inline void setAccPosSollbeschlGrad02(float value);

  inline bool getAccAnfahren();
  inline void setAccAnfahren(bool value);

  inline bool getAccAnhalten();
  inline void setAccAnhalten(bool value);

  inline  ::int32_t getAccTyp();
  inline void setAccTyp( ::int32_t value);

  inline  ::int32_t getAccStatusAcc();
  inline void setAccStatusAcc( ::int32_t value);

  inline bool getAccMinimaleBremsung();
  inline void setAccMinimaleBremsung(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc06::Pipeline {
public:
  typedef VagAcc06 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc07::Reader {
public:
  typedef VagAcc07 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAccDistanceToStop() const;

  inline bool getAccHoldRequest() const;

  inline bool getAccBoostRequest() const;

  inline bool getAccFreewheelRequest() const;

  inline  ::int32_t getAccFreewheelType() const;

  inline  ::int32_t getAccHoldType() const;

  inline bool getAccHoldRelease() const;

  inline float getAccAccelSecondary() const;

  inline float getAccAccelTsk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc07::Builder {
public:
  typedef VagAcc07 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAccDistanceToStop();
  inline void setAccDistanceToStop(float value);

  inline bool getAccHoldRequest();
  inline void setAccHoldRequest(bool value);

  inline bool getAccBoostRequest();
  inline void setAccBoostRequest(bool value);

  inline bool getAccFreewheelRequest();
  inline void setAccFreewheelRequest(bool value);

  inline  ::int32_t getAccFreewheelType();
  inline void setAccFreewheelType( ::int32_t value);

  inline  ::int32_t getAccHoldType();
  inline void setAccHoldType( ::int32_t value);

  inline bool getAccHoldRelease();
  inline void setAccHoldRelease(bool value);

  inline float getAccAccelSecondary();
  inline void setAccAccelSecondary(float value);

  inline float getAccAccelTsk();
  inline void setAccAccelTsk(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc07::Pipeline {
public:
  typedef VagAcc07 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagAcc10::Reader {
public:
  typedef VagAcc10 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getAwv1AnfPrefill() const;

  inline bool getAnbCmInfo() const;

  inline bool getAwv2Freigabe() const;

  inline  ::int32_t getAwv1HbaParam() const;

  inline  ::int32_t getAwv2Ruckprofil() const;

  inline bool getAwv2Priowarnung() const;

  inline bool getAnbCmAnforderung() const;

  inline bool getAnbInfoTeilbremsung() const;

  inline bool getAnbNotfallblinken() const;

  inline bool getAnbTeilbremsungFreigabe() const;

  inline float getAnbZielbremsTeilbremsVerzAnf() const;

  inline bool getAnbZielbremsungFreigabe() const;

  inline bool getAwvVorstufe() const;

  inline bool getAwvHalten() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagAcc10::Builder {
public:
  typedef VagAcc10 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getAwv1AnfPrefill();
  inline void setAwv1AnfPrefill(bool value);

  inline bool getAnbCmInfo();
  inline void setAnbCmInfo(bool value);

  inline bool getAwv2Freigabe();
  inline void setAwv2Freigabe(bool value);

  inline  ::int32_t getAwv1HbaParam();
  inline void setAwv1HbaParam( ::int32_t value);

  inline  ::int32_t getAwv2Ruckprofil();
  inline void setAwv2Ruckprofil( ::int32_t value);

  inline bool getAwv2Priowarnung();
  inline void setAwv2Priowarnung(bool value);

  inline bool getAnbCmAnforderung();
  inline void setAnbCmAnforderung(bool value);

  inline bool getAnbInfoTeilbremsung();
  inline void setAnbInfoTeilbremsung(bool value);

  inline bool getAnbNotfallblinken();
  inline void setAnbNotfallblinken(bool value);

  inline bool getAnbTeilbremsungFreigabe();
  inline void setAnbTeilbremsungFreigabe(bool value);

  inline float getAnbZielbremsTeilbremsVerzAnf();
  inline void setAnbZielbremsTeilbremsVerzAnf(float value);

  inline bool getAnbZielbremsungFreigabe();
  inline void setAnbZielbremsungFreigabe(bool value);

  inline bool getAwvVorstufe();
  inline void setAwvVorstufe(bool value);

  inline bool getAwvHalten();
  inline void setAwvHalten(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagAcc10::Pipeline {
public:
  typedef VagAcc10 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagGraAcc01::Reader {
public:
  typedef VagGraAcc01 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getGraHauptschalter() const;

  inline bool getGraAbbrechen() const;

  inline bool getGraTypHauptschalter() const;

  inline bool getGraLimiter() const;

  inline bool getGraTipSetzen() const;

  inline bool getGraTipHoch() const;

  inline bool getGraTipRunter() const;

  inline bool getGraTipWiederaufnahme() const;

  inline  ::int32_t getGraVerstellungZeitluecke() const;

  inline  ::int32_t getGraCodierung() const;

  inline bool getGraFehler() const;

  inline  ::int32_t getGraTyp468() const;

  inline bool getGraTipStufe2() const;

  inline  ::int32_t getGraButtonTypeInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagGraAcc01::Builder {
public:
  typedef VagGraAcc01 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getGraHauptschalter();
  inline void setGraHauptschalter(bool value);

  inline bool getGraAbbrechen();
  inline void setGraAbbrechen(bool value);

  inline bool getGraTypHauptschalter();
  inline void setGraTypHauptschalter(bool value);

  inline bool getGraLimiter();
  inline void setGraLimiter(bool value);

  inline bool getGraTipSetzen();
  inline void setGraTipSetzen(bool value);

  inline bool getGraTipHoch();
  inline void setGraTipHoch(bool value);

  inline bool getGraTipRunter();
  inline void setGraTipRunter(bool value);

  inline bool getGraTipWiederaufnahme();
  inline void setGraTipWiederaufnahme(bool value);

  inline  ::int32_t getGraVerstellungZeitluecke();
  inline void setGraVerstellungZeitluecke( ::int32_t value);

  inline  ::int32_t getGraCodierung();
  inline void setGraCodierung( ::int32_t value);

  inline bool getGraFehler();
  inline void setGraFehler(bool value);

  inline  ::int32_t getGraTyp468();
  inline void setGraTyp468( ::int32_t value);

  inline bool getGraTipStufe2();
  inline void setGraTipStufe2(bool value);

  inline  ::int32_t getGraButtonTypeInfo();
  inline void setGraButtonTypeInfo( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagGraAcc01::Pipeline {
public:
  typedef VagGraAcc01 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagTsr::Reader {
public:
  typedef VagTsr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getVzeAnzeigemodus() const;

  inline  ::int32_t getVzeHinweistext() const;

  inline  ::int32_t getVzeStatuszaehler1() const;

  inline  ::int32_t getVzeStatuszaehler2() const;

  inline  ::int32_t getVzeStatuszaehler3() const;

  inline  ::int32_t getVzeVerkehrszeichen1() const;

  inline  ::int32_t getVzeVerkehrszeichen2() const;

  inline  ::int32_t getVzeVerkehrszeichen3() const;

  inline bool getVzeWarnungVerkehrszeichen1() const;

  inline bool getVzeWarnungVerkehrszeichen2() const;

  inline bool getVzeWarnungVerkehrszeichen3() const;

  inline  ::int32_t getVzeZusatzschild1() const;

  inline  ::int32_t getVzeZusatzschild2() const;

  inline  ::int32_t getVzeZusatzschild3() const;

  inline  ::int32_t getVzeHinweistext02() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagTsr::Builder {
public:
  typedef VagTsr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getVzeAnzeigemodus();
  inline void setVzeAnzeigemodus( ::int32_t value);

  inline  ::int32_t getVzeHinweistext();
  inline void setVzeHinweistext( ::int32_t value);

  inline  ::int32_t getVzeStatuszaehler1();
  inline void setVzeStatuszaehler1( ::int32_t value);

  inline  ::int32_t getVzeStatuszaehler2();
  inline void setVzeStatuszaehler2( ::int32_t value);

  inline  ::int32_t getVzeStatuszaehler3();
  inline void setVzeStatuszaehler3( ::int32_t value);

  inline  ::int32_t getVzeVerkehrszeichen1();
  inline void setVzeVerkehrszeichen1( ::int32_t value);

  inline  ::int32_t getVzeVerkehrszeichen2();
  inline void setVzeVerkehrszeichen2( ::int32_t value);

  inline  ::int32_t getVzeVerkehrszeichen3();
  inline void setVzeVerkehrszeichen3( ::int32_t value);

  inline bool getVzeWarnungVerkehrszeichen1();
  inline void setVzeWarnungVerkehrszeichen1(bool value);

  inline bool getVzeWarnungVerkehrszeichen2();
  inline void setVzeWarnungVerkehrszeichen2(bool value);

  inline bool getVzeWarnungVerkehrszeichen3();
  inline void setVzeWarnungVerkehrszeichen3(bool value);

  inline  ::int32_t getVzeZusatzschild1();
  inline void setVzeZusatzschild1( ::int32_t value);

  inline  ::int32_t getVzeZusatzschild2();
  inline void setVzeZusatzschild2( ::int32_t value);

  inline  ::int32_t getVzeZusatzschild3();
  inline void setVzeZusatzschild3( ::int32_t value);

  inline  ::int32_t getVzeHinweistext02();
  inline void setVzeHinweistext02( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagTsr::Pipeline {
public:
  typedef VagTsr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::VagTemperatureInfo::Reader {
public:
  typedef VagTemperatureInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVagEngineInAirTemperature() const;

  inline  ::int32_t getVagEngineOilTemperature() const;

  inline float getVagEngineCoolantTemperature() const;

  inline  ::int32_t getVagGearboxSumpfTemperature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::VagTemperatureInfo::Builder {
public:
  typedef VagTemperatureInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVagEngineInAirTemperature();
  inline void setVagEngineInAirTemperature(float value);

  inline  ::int32_t getVagEngineOilTemperature();
  inline void setVagEngineOilTemperature( ::int32_t value);

  inline float getVagEngineCoolantTemperature();
  inline void setVagEngineCoolantTemperature(float value);

  inline  ::int32_t getVagGearboxSumpfTemperature();
  inline void setVagGearboxSumpfTemperature( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::VagTemperatureInfo::Pipeline {
public:
  typedef VagTemperatureInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::WheelSpeeds::Reader {
public:
  typedef WheelSpeeds Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getFl() const;

  inline float getFr() const;

  inline float getRl() const;

  inline float getRr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::WheelSpeeds::Builder {
public:
  typedef WheelSpeeds Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFl();
  inline void setFl(float value);

  inline float getFr();
  inline void setFr(float value);

  inline float getRl();
  inline void setRl(float value);

  inline float getRr();
  inline void setRr(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::WheelSpeeds::Pipeline {
public:
  typedef WheelSpeeds Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::CruiseState::Reader {
public:
  typedef CruiseState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getSpeed() const;

  inline bool getAvailable() const;

  inline float getSpeedOffset() const;

  inline bool getStandstill() const;

  inline bool getNonAdaptive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::CruiseState::Builder {
public:
  typedef CruiseState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline bool getAvailable();
  inline void setAvailable(bool value);

  inline float getSpeedOffset();
  inline void setSpeedOffset(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

  inline bool getNonAdaptive();
  inline void setNonAdaptive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::CruiseState::Pipeline {
public:
  typedef CruiseState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::ButtonEvent::Reader {
public:
  typedef ButtonEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPressed() const;

  inline  ::cereal::CarState::ButtonEvent::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::ButtonEvent::Builder {
public:
  typedef ButtonEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPressed();
  inline void setPressed(bool value);

  inline  ::cereal::CarState::ButtonEvent::Type getType();
  inline void setType( ::cereal::CarState::ButtonEvent::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::ButtonEvent::Pipeline {
public:
  typedef ButtonEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::Reader {
public:
  typedef RadarData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrors() const;
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader getErrors() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::Builder {
public:
  typedef RadarData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrors();
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader value);
  inline void setErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value);
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>> disownErrors();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::Pipeline {
public:
  typedef RadarData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::RadarPoint::Reader {
public:
  typedef RadarPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getYvRel() const;

  inline bool getMeasured() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::RadarPoint::Builder {
public:
  typedef RadarPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId();
  inline void setTrackId( ::uint64_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getYvRel();
  inline void setYvRel(float value);

  inline bool getMeasured();
  inline void setMeasured(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::RadarPoint::Pipeline {
public:
  typedef RadarPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Reader {
public:
  typedef CarControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getGasDEPRECATED() const;

  inline float getBrakeDEPRECATED() const;

  inline float getSteeringTorqueDEPRECATED() const;

  inline bool hasCruiseControl() const;
  inline  ::cereal::CarControl::CruiseControl::Reader getCruiseControl() const;

  inline bool hasHudControl() const;
  inline  ::cereal::CarControl::HUDControl::Reader getHudControl() const;

  inline bool hasActuators() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuators() const;

  inline bool getActive() const;

  inline float getRoll() const;

  inline float getPitch() const;

  inline bool hasActuatorsOutput() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuatorsOutput() const;

  inline bool getAvailableFulltimeLka() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Builder {
public:
  typedef CarControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getGasDEPRECATED();
  inline void setGasDEPRECATED(float value);

  inline float getBrakeDEPRECATED();
  inline void setBrakeDEPRECATED(float value);

  inline float getSteeringTorqueDEPRECATED();
  inline void setSteeringTorqueDEPRECATED(float value);

  inline bool hasCruiseControl();
  inline  ::cereal::CarControl::CruiseControl::Builder getCruiseControl();
  inline void setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value);
  inline  ::cereal::CarControl::CruiseControl::Builder initCruiseControl();
  inline void adoptCruiseControl(::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> disownCruiseControl();

  inline bool hasHudControl();
  inline  ::cereal::CarControl::HUDControl::Builder getHudControl();
  inline void setHudControl( ::cereal::CarControl::HUDControl::Reader value);
  inline  ::cereal::CarControl::HUDControl::Builder initHudControl();
  inline void adoptHudControl(::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> disownHudControl();

  inline bool hasActuators();
  inline  ::cereal::CarControl::Actuators::Builder getActuators();
  inline void setActuators( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuators();
  inline void adoptActuators(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuators();

  inline bool getActive();
  inline void setActive(bool value);

  inline float getRoll();
  inline void setRoll(float value);

  inline float getPitch();
  inline void setPitch(float value);

  inline bool hasActuatorsOutput();
  inline  ::cereal::CarControl::Actuators::Builder getActuatorsOutput();
  inline void setActuatorsOutput( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuatorsOutput();
  inline void adoptActuatorsOutput(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuatorsOutput();

  inline bool getAvailableFulltimeLka();
  inline void setAvailableFulltimeLka(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Pipeline {
public:
  typedef CarControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarControl::CruiseControl::Pipeline getCruiseControl();
  inline  ::cereal::CarControl::HUDControl::Pipeline getHudControl();
  inline  ::cereal::CarControl::Actuators::Pipeline getActuators();
  inline  ::cereal::CarControl::Actuators::Pipeline getActuatorsOutput();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Actuators::Reader {
public:
  typedef Actuators Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getGas() const;

  inline float getBrake() const;

  inline float getSteer() const;

  inline float getSteeringAngleDeg() const;

  inline float getAccel() const;

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState() const;

  inline float getSpeed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Actuators::Builder {
public:
  typedef Actuators Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getGas();
  inline void setGas(float value);

  inline float getBrake();
  inline void setBrake(float value);

  inline float getSteer();
  inline void setSteer(float value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getAccel();
  inline void setAccel(float value);

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState();
  inline void setLongControlState( ::cereal::CarControl::Actuators::LongControlState value);

  inline float getSpeed();
  inline void setSpeed(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Actuators::Pipeline {
public:
  typedef Actuators Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::CruiseControl::Reader {
public:
  typedef CruiseControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCancel() const;

  inline bool getOverride() const;

  inline float getSpeedOverride() const;

  inline float getAccelOverride() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::CruiseControl::Builder {
public:
  typedef CruiseControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCancel();
  inline void setCancel(bool value);

  inline bool getOverride();
  inline void setOverride(bool value);

  inline float getSpeedOverride();
  inline void setSpeedOverride(float value);

  inline float getAccelOverride();
  inline void setAccelOverride(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::CruiseControl::Pipeline {
public:
  typedef CruiseControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::HUDControl::Reader {
public:
  typedef HUDControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible() const;

  inline float getSetSpeed() const;

  inline bool getLanesVisible() const;

  inline bool getLeadVisible() const;

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert() const;

  inline bool getRightLaneVisible() const;

  inline bool getLeftLaneVisible() const;

  inline bool getRightLaneDepart() const;

  inline bool getLeftLaneDepart() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::HUDControl::Builder {
public:
  typedef HUDControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible();
  inline void setSpeedVisible(bool value);

  inline float getSetSpeed();
  inline void setSetSpeed(float value);

  inline bool getLanesVisible();
  inline void setLanesVisible(bool value);

  inline bool getLeadVisible();
  inline void setLeadVisible(bool value);

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert();
  inline void setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert();
  inline void setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline bool getRightLaneVisible();
  inline void setRightLaneVisible(bool value);

  inline bool getLeftLaneVisible();
  inline void setLeftLaneVisible(bool value);

  inline bool getRightLaneDepart();
  inline void setRightLaneDepart(bool value);

  inline bool getLeftLaneDepart();
  inline void setLeftLaneDepart(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::HUDControl::Pipeline {
public:
  typedef HUDControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::Reader {
public:
  typedef CarParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCarName() const;
  inline  ::capnp::Text::Reader getCarName() const;

  inline bool hasCarFingerprint() const;
  inline  ::capnp::Text::Reader getCarFingerprint() const;

  inline bool getEnableGasInterceptor() const;

  inline bool getPcmCruise() const;

  inline bool getEnableCameraDEPRECATED() const;

  inline bool getEnableDsu() const;

  inline bool getEnableApgs() const;

  inline float getMinEnableSpeed() const;

  inline float getMinSteerSpeed() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModelDEPRECATED() const;

  inline  ::int16_t getSafetyParamDEPRECATED() const;

  inline bool hasSteerMaxBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerMaxBP() const;

  inline bool hasSteerMaxV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerMaxV() const;

  inline bool hasGasMaxBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasMaxBPDEPRECATED() const;

  inline bool hasGasMaxVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasMaxVDEPRECATED() const;

  inline bool hasBrakeMaxBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeMaxBPDEPRECATED() const;

  inline bool hasBrakeMaxVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeMaxVDEPRECATED() const;

  inline float getMass() const;

  inline float getWheelbase() const;

  inline float getCenterToFront() const;

  inline float getSteerRatio() const;

  inline float getSteerRatioRear() const;

  inline float getRotationalInertia() const;

  inline float getTireStiffnessFront() const;

  inline float getTireStiffnessRear() const;

  inline bool hasLongitudinalTuning() const;
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader getLongitudinalTuning() const;

  inline typename LateralTuning::Reader getLateralTuning() const;

  inline bool getSteerLimitAlert() const;

  inline float getVEgoStopping() const;

  inline bool getDirectAccelControl() const;

  inline bool getStoppingControl() const;

  inline float getStartAccelDEPRECATED() const;

  inline float getSteerRateCost() const;

  inline  ::cereal::CarParams::SteerControlType getSteerControlType() const;

  inline bool getRadarOffCan() const;

  inline float getSteerActuatorDelay() const;

  inline bool getOpenpilotLongitudinalControl() const;

  inline bool hasCarVin() const;
  inline  ::capnp::Text::Reader getCarVin() const;

  inline bool getIsPandaBlackDEPRECATED() const;

  inline bool getDashcamOnly() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassiveDEPRECATED() const;

  inline  ::cereal::CarParams::TransmissionType getTransmissionType() const;

  inline bool hasCarFw() const;
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader getCarFw() const;

  inline float getRadarTimeStep() const;

  inline bool getCommunityFeatureDEPRECATED() const;

  inline float getSteerLimitTimer() const;

  inline bool hasLateralParams() const;
  inline  ::cereal::CarParams::LateralParams::Reader getLateralParams() const;

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource() const;

  inline  ::cereal::CarParams::NetworkLocation getNetworkLocation() const;

  inline float getMinSpeedCanDEPRECATED() const;

  inline float getStoppingDecelRate() const;

  inline float getStartingAccelRateDEPRECATED() const;

  inline float getMaxSteeringAngleDeg() const;

  inline bool getFuzzyFingerprint() const;

  inline bool getEnableBsm() const;

  inline bool getHasStockCameraDEPRECATED() const;

  inline float getLongitudinalActuatorDelayUpperBound() const;

  inline float getVEgoStarting() const;

  inline float getStopAccel() const;

  inline float getLongitudinalActuatorDelayLowerBound() const;

  inline bool hasSafetyConfigs() const;
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader getSafetyConfigs() const;

  inline float getWheelSpeedFactor() const;

  inline  ::uint32_t getFlags() const;

  inline  ::int16_t getUnsafeMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::Builder {
public:
  typedef CarParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCarName();
  inline  ::capnp::Text::Builder getCarName();
  inline void setCarName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarName(unsigned int size);
  inline void adoptCarName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarName();

  inline bool hasCarFingerprint();
  inline  ::capnp::Text::Builder getCarFingerprint();
  inline void setCarFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarFingerprint(unsigned int size);
  inline void adoptCarFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarFingerprint();

  inline bool getEnableGasInterceptor();
  inline void setEnableGasInterceptor(bool value);

  inline bool getPcmCruise();
  inline void setPcmCruise(bool value);

  inline bool getEnableCameraDEPRECATED();
  inline void setEnableCameraDEPRECATED(bool value);

  inline bool getEnableDsu();
  inline void setEnableDsu(bool value);

  inline bool getEnableApgs();
  inline void setEnableApgs(bool value);

  inline float getMinEnableSpeed();
  inline void setMinEnableSpeed(float value);

  inline float getMinSteerSpeed();
  inline void setMinSteerSpeed(float value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModelDEPRECATED();
  inline void setSafetyModelDEPRECATED( ::cereal::CarParams::SafetyModel value);

  inline  ::int16_t getSafetyParamDEPRECATED();
  inline void setSafetyParamDEPRECATED( ::int16_t value);

  inline bool hasSteerMaxBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerMaxBP();
  inline void setSteerMaxBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerMaxBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerMaxBP(unsigned int size);
  inline void adoptSteerMaxBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerMaxBP();

  inline bool hasSteerMaxV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerMaxV();
  inline void setSteerMaxV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerMaxV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerMaxV(unsigned int size);
  inline void adoptSteerMaxV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerMaxV();

  inline bool hasGasMaxBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasMaxBPDEPRECATED();
  inline void setGasMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasMaxBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasMaxBPDEPRECATED(unsigned int size);
  inline void adoptGasMaxBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasMaxBPDEPRECATED();

  inline bool hasGasMaxVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasMaxVDEPRECATED();
  inline void setGasMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasMaxVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasMaxVDEPRECATED(unsigned int size);
  inline void adoptGasMaxVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasMaxVDEPRECATED();

  inline bool hasBrakeMaxBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeMaxBPDEPRECATED();
  inline void setBrakeMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeMaxBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeMaxBPDEPRECATED(unsigned int size);
  inline void adoptBrakeMaxBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeMaxBPDEPRECATED();

  inline bool hasBrakeMaxVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeMaxVDEPRECATED();
  inline void setBrakeMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeMaxVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeMaxVDEPRECATED(unsigned int size);
  inline void adoptBrakeMaxVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeMaxVDEPRECATED();

  inline float getMass();
  inline void setMass(float value);

  inline float getWheelbase();
  inline void setWheelbase(float value);

  inline float getCenterToFront();
  inline void setCenterToFront(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline float getSteerRatioRear();
  inline void setSteerRatioRear(float value);

  inline float getRotationalInertia();
  inline void setRotationalInertia(float value);

  inline float getTireStiffnessFront();
  inline void setTireStiffnessFront(float value);

  inline float getTireStiffnessRear();
  inline void setTireStiffnessRear(float value);

  inline bool hasLongitudinalTuning();
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder getLongitudinalTuning();
  inline void setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value);
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder initLongitudinalTuning();
  inline void adoptLongitudinalTuning(::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> disownLongitudinalTuning();

  inline typename LateralTuning::Builder getLateralTuning();
  inline typename LateralTuning::Builder initLateralTuning();

  inline bool getSteerLimitAlert();
  inline void setSteerLimitAlert(bool value);

  inline float getVEgoStopping();
  inline void setVEgoStopping(float value);

  inline bool getDirectAccelControl();
  inline void setDirectAccelControl(bool value);

  inline bool getStoppingControl();
  inline void setStoppingControl(bool value);

  inline float getStartAccelDEPRECATED();
  inline void setStartAccelDEPRECATED(float value);

  inline float getSteerRateCost();
  inline void setSteerRateCost(float value);

  inline  ::cereal::CarParams::SteerControlType getSteerControlType();
  inline void setSteerControlType( ::cereal::CarParams::SteerControlType value);

  inline bool getRadarOffCan();
  inline void setRadarOffCan(bool value);

  inline float getSteerActuatorDelay();
  inline void setSteerActuatorDelay(float value);

  inline bool getOpenpilotLongitudinalControl();
  inline void setOpenpilotLongitudinalControl(bool value);

  inline bool hasCarVin();
  inline  ::capnp::Text::Builder getCarVin();
  inline void setCarVin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarVin(unsigned int size);
  inline void adoptCarVin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarVin();

  inline bool getIsPandaBlackDEPRECATED();
  inline void setIsPandaBlackDEPRECATED(bool value);

  inline bool getDashcamOnly();
  inline void setDashcamOnly(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassiveDEPRECATED();
  inline void setSafetyModelPassiveDEPRECATED( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::CarParams::TransmissionType getTransmissionType();
  inline void setTransmissionType( ::cereal::CarParams::TransmissionType value);

  inline bool hasCarFw();
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder getCarFw();
  inline void setCarFw( ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder initCarFw(unsigned int size);
  inline void adoptCarFw(::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>> disownCarFw();

  inline float getRadarTimeStep();
  inline void setRadarTimeStep(float value);

  inline bool getCommunityFeatureDEPRECATED();
  inline void setCommunityFeatureDEPRECATED(bool value);

  inline float getSteerLimitTimer();
  inline void setSteerLimitTimer(float value);

  inline bool hasLateralParams();
  inline  ::cereal::CarParams::LateralParams::Builder getLateralParams();
  inline void setLateralParams( ::cereal::CarParams::LateralParams::Reader value);
  inline  ::cereal::CarParams::LateralParams::Builder initLateralParams();
  inline void adoptLateralParams(::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> disownLateralParams();

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource();
  inline void setFingerprintSource( ::cereal::CarParams::FingerprintSource value);

  inline  ::cereal::CarParams::NetworkLocation getNetworkLocation();
  inline void setNetworkLocation( ::cereal::CarParams::NetworkLocation value);

  inline float getMinSpeedCanDEPRECATED();
  inline void setMinSpeedCanDEPRECATED(float value);

  inline float getStoppingDecelRate();
  inline void setStoppingDecelRate(float value);

  inline float getStartingAccelRateDEPRECATED();
  inline void setStartingAccelRateDEPRECATED(float value);

  inline float getMaxSteeringAngleDeg();
  inline void setMaxSteeringAngleDeg(float value);

  inline bool getFuzzyFingerprint();
  inline void setFuzzyFingerprint(bool value);

  inline bool getEnableBsm();
  inline void setEnableBsm(bool value);

  inline bool getHasStockCameraDEPRECATED();
  inline void setHasStockCameraDEPRECATED(bool value);

  inline float getLongitudinalActuatorDelayUpperBound();
  inline void setLongitudinalActuatorDelayUpperBound(float value);

  inline float getVEgoStarting();
  inline void setVEgoStarting(float value);

  inline float getStopAccel();
  inline void setStopAccel(float value);

  inline float getLongitudinalActuatorDelayLowerBound();
  inline void setLongitudinalActuatorDelayLowerBound(float value);

  inline bool hasSafetyConfigs();
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder getSafetyConfigs();
  inline void setSafetyConfigs( ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder initSafetyConfigs(unsigned int size);
  inline void adoptSafetyConfigs(::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>> disownSafetyConfigs();

  inline float getWheelSpeedFactor();
  inline void setWheelSpeedFactor(float value);

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::int16_t getUnsafeMode();
  inline void setUnsafeMode( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::Pipeline {
public:
  typedef CarParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline getLongitudinalTuning();
  inline typename LateralTuning::Pipeline getLateralTuning();
  inline  ::cereal::CarParams::LateralParams::Pipeline getLateralParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::SafetyConfig::Reader {
public:
  typedef SafetyConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::int16_t getSafetyParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::SafetyConfig::Builder {
public:
  typedef SafetyConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::int16_t getSafetyParam();
  inline void setSafetyParam( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::SafetyConfig::Pipeline {
public:
  typedef SafetyConfig Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralParams::Reader {
public:
  typedef LateralParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTorqueBP() const;

  inline bool hasTorqueV() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTorqueV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralParams::Builder {
public:
  typedef LateralParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTorqueBP();
  inline void setTorqueBP( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTorqueBP(unsigned int size);
  inline void adoptTorqueBP(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownTorqueBP();

  inline bool hasTorqueV();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTorqueV();
  inline void setTorqueV( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTorqueV(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTorqueV(unsigned int size);
  inline void adoptTorqueV(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownTorqueV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralParams::Pipeline {
public:
  typedef LateralParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralPIDTuning::Reader {
public:
  typedef LateralPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiV() const;

  inline float getKf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralPIDTuning::Builder {
public:
  typedef LateralPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpV();
  inline void setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiV();
  inline void setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiV();

  inline float getKf();
  inline void setKf(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralPIDTuning::Pipeline {
public:
  typedef LateralPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LongitudinalPIDTuning::Reader {
public:
  typedef LongitudinalPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiV() const;

  inline bool hasDeadzoneBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDeadzoneBP() const;

  inline bool hasDeadzoneV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDeadzoneV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LongitudinalPIDTuning::Builder {
public:
  typedef LongitudinalPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpV();
  inline void setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiV();
  inline void setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiV();

  inline bool hasDeadzoneBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDeadzoneBP();
  inline void setDeadzoneBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDeadzoneBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDeadzoneBP(unsigned int size);
  inline void adoptDeadzoneBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDeadzoneBP();

  inline bool hasDeadzoneV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDeadzoneV();
  inline void setDeadzoneV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDeadzoneV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDeadzoneV(unsigned int size);
  inline void adoptDeadzoneV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDeadzoneV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LongitudinalPIDTuning::Pipeline {
public:
  typedef LongitudinalPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralINDITuning::Reader {
public:
  typedef LateralINDITuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGainDEPRECATED() const;

  inline float getInnerLoopGainDEPRECATED() const;

  inline float getTimeConstantDEPRECATED() const;

  inline float getActuatorEffectivenessDEPRECATED() const;

  inline bool hasOuterLoopGainBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOuterLoopGainBP() const;

  inline bool hasOuterLoopGainV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOuterLoopGainV() const;

  inline bool hasInnerLoopGainBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getInnerLoopGainBP() const;

  inline bool hasInnerLoopGainV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getInnerLoopGainV() const;

  inline bool hasTimeConstantBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTimeConstantBP() const;

  inline bool hasTimeConstantV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTimeConstantV() const;

  inline bool hasActuatorEffectivenessBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getActuatorEffectivenessBP() const;

  inline bool hasActuatorEffectivenessV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getActuatorEffectivenessV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralINDITuning::Builder {
public:
  typedef LateralINDITuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGainDEPRECATED();
  inline void setOuterLoopGainDEPRECATED(float value);

  inline float getInnerLoopGainDEPRECATED();
  inline void setInnerLoopGainDEPRECATED(float value);

  inline float getTimeConstantDEPRECATED();
  inline void setTimeConstantDEPRECATED(float value);

  inline float getActuatorEffectivenessDEPRECATED();
  inline void setActuatorEffectivenessDEPRECATED(float value);

  inline bool hasOuterLoopGainBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOuterLoopGainBP();
  inline void setOuterLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOuterLoopGainBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOuterLoopGainBP(unsigned int size);
  inline void adoptOuterLoopGainBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOuterLoopGainBP();

  inline bool hasOuterLoopGainV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOuterLoopGainV();
  inline void setOuterLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOuterLoopGainV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOuterLoopGainV(unsigned int size);
  inline void adoptOuterLoopGainV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOuterLoopGainV();

  inline bool hasInnerLoopGainBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getInnerLoopGainBP();
  inline void setInnerLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInnerLoopGainBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initInnerLoopGainBP(unsigned int size);
  inline void adoptInnerLoopGainBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownInnerLoopGainBP();

  inline bool hasInnerLoopGainV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getInnerLoopGainV();
  inline void setInnerLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInnerLoopGainV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initInnerLoopGainV(unsigned int size);
  inline void adoptInnerLoopGainV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownInnerLoopGainV();

  inline bool hasTimeConstantBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTimeConstantBP();
  inline void setTimeConstantBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimeConstantBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTimeConstantBP(unsigned int size);
  inline void adoptTimeConstantBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTimeConstantBP();

  inline bool hasTimeConstantV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTimeConstantV();
  inline void setTimeConstantV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimeConstantV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTimeConstantV(unsigned int size);
  inline void adoptTimeConstantV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTimeConstantV();

  inline bool hasActuatorEffectivenessBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getActuatorEffectivenessBP();
  inline void setActuatorEffectivenessBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActuatorEffectivenessBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initActuatorEffectivenessBP(unsigned int size);
  inline void adoptActuatorEffectivenessBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownActuatorEffectivenessBP();

  inline bool hasActuatorEffectivenessV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getActuatorEffectivenessV();
  inline void setActuatorEffectivenessV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActuatorEffectivenessV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initActuatorEffectivenessV(unsigned int size);
  inline void adoptActuatorEffectivenessV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownActuatorEffectivenessV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralINDITuning::Pipeline {
public:
  typedef LateralINDITuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralLQRTuning::Reader {
public:
  typedef LateralLQRTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getScale() const;

  inline float getKi() const;

  inline float getDcGain() const;

  inline bool hasA() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getA() const;

  inline bool hasB() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getB() const;

  inline bool hasC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getC() const;

  inline bool hasK() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getK() const;

  inline bool hasL() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getL() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralLQRTuning::Builder {
public:
  typedef LateralLQRTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getScale();
  inline void setScale(float value);

  inline float getKi();
  inline void setKi(float value);

  inline float getDcGain();
  inline void setDcGain(float value);

  inline bool hasA();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getA();
  inline void setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setA(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownA();

  inline bool hasB();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getB();
  inline void setB( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setB(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initB(unsigned int size);
  inline void adoptB(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownB();

  inline bool hasC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getC();
  inline void setC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initC(unsigned int size);
  inline void adoptC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownC();

  inline bool hasK();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getK();
  inline void setK( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setK(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initK(unsigned int size);
  inline void adoptK(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownK();

  inline bool hasL();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getL();
  inline void setL( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setL(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initL(unsigned int size);
  inline void adoptL(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownL();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralLQRTuning::Pipeline {
public:
  typedef LateralLQRTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::CarFw::Reader {
public:
  typedef CarFw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu() const;

  inline bool hasFwVersion() const;
  inline  ::capnp::Data::Reader getFwVersion() const;

  inline  ::uint32_t getAddress() const;

  inline  ::uint8_t getSubAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::CarFw::Builder {
public:
  typedef CarFw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu();
  inline void setEcu( ::cereal::CarParams::Ecu value);

  inline bool hasFwVersion();
  inline  ::capnp::Data::Builder getFwVersion();
  inline void setFwVersion( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFwVersion(unsigned int size);
  inline void adoptFwVersion(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFwVersion();

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint8_t getSubAddress();
  inline void setSubAddress( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::CarFw::Pipeline {
public:
  typedef CarFw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralTuning::Reader {
public:
  typedef LateralTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isPid() const;
  inline bool hasPid() const;
  inline  ::cereal::CarParams::LateralPIDTuning::Reader getPid() const;

  inline bool isIndi() const;
  inline bool hasIndi() const;
  inline  ::cereal::CarParams::LateralINDITuning::Reader getIndi() const;

  inline bool isLqr() const;
  inline bool hasLqr() const;
  inline  ::cereal::CarParams::LateralLQRTuning::Reader getLqr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralTuning::Builder {
public:
  typedef LateralTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isPid();
  inline bool hasPid();
  inline  ::cereal::CarParams::LateralPIDTuning::Builder getPid();
  inline void setPid( ::cereal::CarParams::LateralPIDTuning::Reader value);
  inline  ::cereal::CarParams::LateralPIDTuning::Builder initPid();
  inline void adoptPid(::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> disownPid();

  inline bool isIndi();
  inline bool hasIndi();
  inline  ::cereal::CarParams::LateralINDITuning::Builder getIndi();
  inline void setIndi( ::cereal::CarParams::LateralINDITuning::Reader value);
  inline  ::cereal::CarParams::LateralINDITuning::Builder initIndi();
  inline void adoptIndi(::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> disownIndi();

  inline bool isLqr();
  inline bool hasLqr();
  inline  ::cereal::CarParams::LateralLQRTuning::Builder getLqr();
  inline void setLqr( ::cereal::CarParams::LateralLQRTuning::Reader value);
  inline  ::cereal::CarParams::LateralLQRTuning::Builder initLqr();
  inline void adoptLqr(::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> disownLqr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralTuning::Pipeline {
public:
  typedef LateralTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::cereal::CarEvent::EventName CarEvent::Reader::getName() const {
  return _reader.getDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarEvent::EventName CarEvent::Builder::getName() {
  return _builder.getDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setName( ::cereal::CarEvent::EventName value) {
  _builder.setDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getNoEntry() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getNoEntry() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setNoEntry(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getUserDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getUserDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setUserDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getSoftDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getSoftDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setSoftDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getImmediateDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getImmediateDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setImmediateDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getPreEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getPreEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setPreEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasErrorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasErrorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Reader CarState::Reader::getErrorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Builder CarState::Builder::getErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setErrorsDEPRECATED( ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::CarEvent::EventName> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>::Builder CarState::Builder::initErrorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptErrorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>> CarState::Builder::disownErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasWheelSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasWheelSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::WheelSpeeds::Reader CarState::Reader::getWheelSpeeds() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::getWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::WheelSpeeds::Pipeline CarState::Pipeline::getWheelSpeeds() {
  return  ::cereal::CarState::WheelSpeeds::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::initWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptWheelSpeeds(
    ::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> CarState::Builder::disownWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getGas() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getGas() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGas(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGasPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGasPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGasPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakePressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakePressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakePressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasCruiseState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCruiseState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::CruiseState::Reader CarState::Reader::getCruiseState() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::getCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::CruiseState::Pipeline CarState::Pipeline::getCruiseState() {
  return  ::cereal::CarState::CruiseState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setCruiseState( ::cereal::CarState::CruiseState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::initCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptCruiseState(
    ::capnp::Orphan< ::cereal::CarState::CruiseState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::CruiseState> CarState::Builder::disownCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasButtonEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasButtonEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader CarState::Reader::getButtonEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::getButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::initButtonEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptButtonEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>> CarState::Builder::disownButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader CarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder CarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder CarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> CarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader CarState::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> CarState::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::cereal::CarState::GearShifter CarState::Reader::getGearShifter() const {
  return _reader.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::GearShifter CarState::Builder::getGearShifter() {
  return _builder.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGearShifter( ::cereal::CarState::GearShifter value) {
  _builder.setDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getAEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getAEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setAEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVEgoRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgoRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgoRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakeLights() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakeLights() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakeLights(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGenericToggle() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGenericToggle() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGenericToggle(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getDoorOpen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getDoorOpen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setDoorOpen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSeatbeltUnlatched() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSeatbeltUnlatched() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSeatbeltUnlatched(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCanValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCanValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorqueEps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorqueEps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorqueEps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getClutchPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getClutchPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setClutchPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringRateLimited() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringRateLimited() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRateLimited(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockAeb() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockAeb() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockAeb(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getEspDisabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getEspDisabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setEspDisabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlindspot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlindspot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlindspot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlindspot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlindspot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlindspot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteerWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteerWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteerWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteerError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteerError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteerError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngleOffsetDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngleOffsetDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngleOffsetDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakeHoldActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakeHoldActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakeHoldActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlindspotWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlindspotWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlindspotWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlindspotWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlindspotWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlindspotWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasVagAcc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasVagAcc() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc::Reader CarState::Reader::getVagAcc() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc::Builder CarState::Builder::getVagAcc() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc::Pipeline CarState::Pipeline::getVagAcc() {
  return  ::cereal::CarState::VagAcc::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setVagAcc( ::cereal::CarState::VagAcc::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc::Builder CarState::Builder::initVagAcc() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptVagAcc(
    ::capnp::Orphan< ::cereal::CarState::VagAcc>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc> CarState::Builder::disownVagAcc() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasVagTsr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasVagTsr() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagTsr::Reader CarState::Reader::getVagTsr() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagTsr::Builder CarState::Builder::getVagTsr() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagTsr::Pipeline CarState::Pipeline::getVagTsr() {
  return  ::cereal::CarState::VagTsr::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setVagTsr( ::cereal::CarState::VagTsr::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagTsr::Builder CarState::Builder::initVagTsr() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptVagTsr(
    ::capnp::Orphan< ::cereal::CarState::VagTsr>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagTsr> CarState::Builder::disownVagTsr() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTsr>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasVagTemperatureInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasVagTemperatureInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagTemperatureInfo::Reader CarState::Reader::getVagTemperatureInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagTemperatureInfo::Builder CarState::Builder::getVagTemperatureInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagTemperatureInfo::Pipeline CarState::Pipeline::getVagTemperatureInfo() {
  return  ::cereal::CarState::VagTemperatureInfo::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setVagTemperatureInfo( ::cereal::CarState::VagTemperatureInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagTemperatureInfo::Builder CarState::Builder::initVagTemperatureInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptVagTemperatureInfo(
    ::capnp::Orphan< ::cereal::CarState::VagTemperatureInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagTemperatureInfo> CarState::Builder::disownVagTemperatureInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagTemperatureInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagAcc02() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagAcc02() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc02::Reader CarState::VagAcc::Reader::getVagAcc02() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc02::Builder CarState::VagAcc::Builder::getVagAcc02() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc02::Pipeline CarState::VagAcc::Pipeline::getVagAcc02() {
  return  ::cereal::CarState::VagAcc02::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagAcc02( ::cereal::CarState::VagAcc02::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc02::Builder CarState::VagAcc::Builder::initVagAcc02() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagAcc02(
    ::capnp::Orphan< ::cereal::CarState::VagAcc02>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc02> CarState::VagAcc::Builder::disownVagAcc02() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc02>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagAcc04() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagAcc04() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc04::Reader CarState::VagAcc::Reader::getVagAcc04() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc04::Builder CarState::VagAcc::Builder::getVagAcc04() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc04::Pipeline CarState::VagAcc::Pipeline::getVagAcc04() {
  return  ::cereal::CarState::VagAcc04::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagAcc04( ::cereal::CarState::VagAcc04::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc04::Builder CarState::VagAcc::Builder::initVagAcc04() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagAcc04(
    ::capnp::Orphan< ::cereal::CarState::VagAcc04>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc04> CarState::VagAcc::Builder::disownVagAcc04() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc04>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagAcc06() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagAcc06() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc06::Reader CarState::VagAcc::Reader::getVagAcc06() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc06::Builder CarState::VagAcc::Builder::getVagAcc06() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc06::Pipeline CarState::VagAcc::Pipeline::getVagAcc06() {
  return  ::cereal::CarState::VagAcc06::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagAcc06( ::cereal::CarState::VagAcc06::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc06::Builder CarState::VagAcc::Builder::initVagAcc06() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagAcc06(
    ::capnp::Orphan< ::cereal::CarState::VagAcc06>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc06> CarState::VagAcc::Builder::disownVagAcc06() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc06>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagAcc07() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagAcc07() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc07::Reader CarState::VagAcc::Reader::getVagAcc07() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc07::Builder CarState::VagAcc::Builder::getVagAcc07() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc07::Pipeline CarState::VagAcc::Pipeline::getVagAcc07() {
  return  ::cereal::CarState::VagAcc07::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagAcc07( ::cereal::CarState::VagAcc07::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc07::Builder CarState::VagAcc::Builder::initVagAcc07() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagAcc07(
    ::capnp::Orphan< ::cereal::CarState::VagAcc07>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc07> CarState::VagAcc::Builder::disownVagAcc07() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc07>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagAcc10() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagAcc10() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagAcc10::Reader CarState::VagAcc::Reader::getVagAcc10() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagAcc10::Builder CarState::VagAcc::Builder::getVagAcc10() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagAcc10::Pipeline CarState::VagAcc::Pipeline::getVagAcc10() {
  return  ::cereal::CarState::VagAcc10::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagAcc10( ::cereal::CarState::VagAcc10::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagAcc10::Builder CarState::VagAcc::Builder::initVagAcc10() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagAcc10(
    ::capnp::Orphan< ::cereal::CarState::VagAcc10>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagAcc10> CarState::VagAcc::Builder::disownVagAcc10() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagAcc10>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarState::VagAcc::Reader::hasVagGraAcc01() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::VagAcc::Builder::hasVagGraAcc01() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::VagGraAcc01::Reader CarState::VagAcc::Reader::getVagGraAcc01() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::VagGraAcc01::Builder CarState::VagAcc::Builder::getVagGraAcc01() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::VagGraAcc01::Pipeline CarState::VagAcc::Pipeline::getVagGraAcc01() {
  return  ::cereal::CarState::VagGraAcc01::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void CarState::VagAcc::Builder::setVagGraAcc01( ::cereal::CarState::VagGraAcc01::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::VagGraAcc01::Builder CarState::VagAcc::Builder::initVagGraAcc01() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarState::VagAcc::Builder::adoptVagGraAcc01(
    ::capnp::Orphan< ::cereal::CarState::VagGraAcc01>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::VagGraAcc01> CarState::VagAcc::Builder::disownVagGraAcc01() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::VagGraAcc01>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float CarState::VagAcc02::Reader::getAccWunschgeschw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc02::Builder::getAccWunschgeschw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccWunschgeschw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccStatusPrimAnz() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccStatusPrimAnz() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccStatusPrimAnz( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccAbstandsindex() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccAbstandsindex() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccAbstandsindex( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccAkustik() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccAkustik() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccAkustik( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccGesetzteZeitluecke() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccGesetzteZeitluecke() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccGesetzteZeitluecke( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccOptischerFahrerhinweis() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccOptischerFahrerhinweis() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccOptischerFahrerhinweis(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccTypTachokranz() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccTypTachokranz() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccTypTachokranz(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccAnzeigeZeitluecke() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccAnzeigeZeitluecke() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccAnzeigeZeitluecke(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccTachokranz() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccTachokranz() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccTachokranz(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccDisplayPrio() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccDisplayPrio() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccDisplayPrio(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccRelevantesObjekt() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccRelevantesObjekt() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccRelevantesObjekt( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccTextePrimaeranz() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccTextePrimaeranz() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccTextePrimaeranz( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc02::Reader::getAccWunschgeschwErreicht() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc02::Builder::getAccWunschgeschwErreicht() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccWunschgeschwErreicht(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc02::Reader::getAccStatusAnzeige() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc02::Builder::getAccStatusAnzeige() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc02::Builder::setAccStatusAnzeige( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccTexteZusatzanz() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccTexteZusatzanz() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccTexteZusatzanz( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccStatusZusatzanz() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccStatusZusatzanz() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccStatusZusatzanz( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccTexte() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccTexte() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccTexte( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccTexteBrakingGuard() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccTexteBrakingGuard() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccTexteBrakingGuard( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc04::Reader::getAccWarnhinweis() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc04::Builder::getAccWarnhinweis() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccWarnhinweis(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc04::Reader::getAccGeschwZielfahrzeug() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc04::Builder::getAccGeschwZielfahrzeug() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccGeschwZielfahrzeug(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccCharismaFahrPr() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccCharismaFahrPr() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccCharismaFahrPr( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccCharismaStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccCharismaStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccCharismaStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc04::Reader::getAccCharismaUmschaltung() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc04::Builder::getAccCharismaUmschaltung() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc04::Builder::setAccCharismaUmschaltung( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc06::Reader::getAccLimitierteAnfahrdyn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc06::Builder::getAccLimitierteAnfahrdyn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccLimitierteAnfahrdyn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc06::Reader::getAccZulRegelabwUnten() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc06::Builder::getAccZulRegelabwUnten() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccZulRegelabwUnten(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc06::Reader::getAccStartStoppInfo() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc06::Builder::getAccStartStoppInfo() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccStartStoppInfo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc06::Reader::getAccSollbeschleunigung02() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc06::Builder::getAccSollbeschleunigung02() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccSollbeschleunigung02(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc06::Reader::getAccZulRegelabwOben() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc06::Builder::getAccZulRegelabwOben() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccZulRegelabwOben(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc06::Reader::getAccNegSollbeschlGrad02() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc06::Builder::getAccNegSollbeschlGrad02() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccNegSollbeschlGrad02(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc06::Reader::getAccPosSollbeschlGrad02() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc06::Builder::getAccPosSollbeschlGrad02() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccPosSollbeschlGrad02(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc06::Reader::getAccAnfahren() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc06::Builder::getAccAnfahren() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccAnfahren(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc06::Reader::getAccAnhalten() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc06::Builder::getAccAnhalten() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccAnhalten(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc06::Reader::getAccTyp() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc06::Builder::getAccTyp() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccTyp( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc06::Reader::getAccStatusAcc() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc06::Builder::getAccStatusAcc() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccStatusAcc( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc06::Reader::getAccMinimaleBremsung() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc06::Builder::getAccMinimaleBremsung() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc06::Builder::setAccMinimaleBremsung(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc07::Reader::getAccDistanceToStop() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc07::Builder::getAccDistanceToStop() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccDistanceToStop(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc07::Reader::getAccHoldRequest() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc07::Builder::getAccHoldRequest() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccHoldRequest(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc07::Reader::getAccBoostRequest() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc07::Builder::getAccBoostRequest() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccBoostRequest(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc07::Reader::getAccFreewheelRequest() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc07::Builder::getAccFreewheelRequest() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccFreewheelRequest(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc07::Reader::getAccFreewheelType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc07::Builder::getAccFreewheelType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccFreewheelType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc07::Reader::getAccHoldType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc07::Builder::getAccHoldType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccHoldType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc07::Reader::getAccHoldRelease() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc07::Builder::getAccHoldRelease() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccHoldRelease(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc07::Reader::getAccAccelSecondary() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc07::Builder::getAccAccelSecondary() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccAccelSecondary(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc07::Reader::getAccAccelTsk() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc07::Builder::getAccAccelTsk() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc07::Builder::setAccAccelTsk(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAwv1AnfPrefill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAwv1AnfPrefill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwv1AnfPrefill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbCmInfo() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbCmInfo() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbCmInfo(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAwv2Freigabe() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAwv2Freigabe() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwv2Freigabe(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc10::Reader::getAwv1HbaParam() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc10::Builder::getAwv1HbaParam() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwv1HbaParam( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagAcc10::Reader::getAwv2Ruckprofil() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagAcc10::Builder::getAwv2Ruckprofil() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwv2Ruckprofil( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAwv2Priowarnung() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAwv2Priowarnung() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwv2Priowarnung(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbCmAnforderung() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbCmAnforderung() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbCmAnforderung(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbInfoTeilbremsung() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbInfoTeilbremsung() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbInfoTeilbremsung(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbNotfallblinken() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbNotfallblinken() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbNotfallblinken(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbTeilbremsungFreigabe() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbTeilbremsungFreigabe() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbTeilbremsungFreigabe(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagAcc10::Reader::getAnbZielbremsTeilbremsVerzAnf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::VagAcc10::Builder::getAnbZielbremsTeilbremsVerzAnf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbZielbremsTeilbremsVerzAnf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAnbZielbremsungFreigabe() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAnbZielbremsungFreigabe() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAnbZielbremsungFreigabe(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAwvVorstufe() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAwvVorstufe() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwvVorstufe(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagAcc10::Reader::getAwvHalten() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagAcc10::Builder::getAwvHalten() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarState::VagAcc10::Builder::setAwvHalten(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraHauptschalter() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraHauptschalter() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraHauptschalter(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraAbbrechen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraAbbrechen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraAbbrechen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTypHauptschalter() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTypHauptschalter() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTypHauptschalter(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraLimiter() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraLimiter() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraLimiter(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTipSetzen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTipSetzen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTipSetzen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTipHoch() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTipHoch() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTipHoch(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTipRunter() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTipRunter() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTipRunter(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTipWiederaufnahme() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTipWiederaufnahme() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTipWiederaufnahme(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagGraAcc01::Reader::getGraVerstellungZeitluecke() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagGraAcc01::Builder::getGraVerstellungZeitluecke() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraVerstellungZeitluecke( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagGraAcc01::Reader::getGraCodierung() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagGraAcc01::Builder::getGraCodierung() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraCodierung( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraFehler() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraFehler() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraFehler(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagGraAcc01::Reader::getGraTyp468() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagGraAcc01::Builder::getGraTyp468() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTyp468( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagGraAcc01::Reader::getGraTipStufe2() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagGraAcc01::Builder::getGraTipStufe2() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraTipStufe2(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagGraAcc01::Reader::getGraButtonTypeInfo() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagGraAcc01::Builder::getGraButtonTypeInfo() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagGraAcc01::Builder::setGraButtonTypeInfo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeAnzeigemodus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeAnzeigemodus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeAnzeigemodus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeHinweistext() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeHinweistext() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeHinweistext( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeStatuszaehler1() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeStatuszaehler1() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeStatuszaehler1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeStatuszaehler2() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeStatuszaehler2() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeStatuszaehler2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeStatuszaehler3() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeStatuszaehler3() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeStatuszaehler3( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeVerkehrszeichen1() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeVerkehrszeichen1() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeVerkehrszeichen1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeVerkehrszeichen2() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeVerkehrszeichen2() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeVerkehrszeichen2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeVerkehrszeichen3() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeVerkehrszeichen3() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeVerkehrszeichen3( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagTsr::Reader::getVzeWarnungVerkehrszeichen1() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagTsr::Builder::getVzeWarnungVerkehrszeichen1() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeWarnungVerkehrszeichen1(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagTsr::Reader::getVzeWarnungVerkehrszeichen2() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagTsr::Builder::getVzeWarnungVerkehrszeichen2() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeWarnungVerkehrszeichen2(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::VagTsr::Reader::getVzeWarnungVerkehrszeichen3() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<258>() * ::capnp::ELEMENTS);
}

inline bool CarState::VagTsr::Builder::getVzeWarnungVerkehrszeichen3() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<258>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeWarnungVerkehrszeichen3(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<258>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeZusatzschild1() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeZusatzschild1() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeZusatzschild1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeZusatzschild2() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeZusatzschild2() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeZusatzschild2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeZusatzschild3() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeZusatzschild3() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeZusatzschild3( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTsr::Reader::getVzeHinweistext02() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTsr::Builder::getVzeHinweistext02() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTsr::Builder::setVzeHinweistext02( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagTemperatureInfo::Reader::getVagEngineInAirTemperature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::VagTemperatureInfo::Builder::getVagEngineInAirTemperature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTemperatureInfo::Builder::setVagEngineInAirTemperature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTemperatureInfo::Reader::getVagEngineOilTemperature() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTemperatureInfo::Builder::getVagEngineOilTemperature() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTemperatureInfo::Builder::setVagEngineOilTemperature( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::VagTemperatureInfo::Reader::getVagEngineCoolantTemperature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::VagTemperatureInfo::Builder::getVagEngineCoolantTemperature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTemperatureInfo::Builder::setVagEngineCoolantTemperature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CarState::VagTemperatureInfo::Reader::getVagGearboxSumpfTemperature() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CarState::VagTemperatureInfo::Builder::getVagGearboxSumpfTemperature() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::VagTemperatureInfo::Builder::setVagGearboxSumpfTemperature( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeedOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeedOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeedOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getNonAdaptive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getNonAdaptive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setNonAdaptive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::ButtonEvent::Reader::getPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::ButtonEvent::Builder::getPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setType( ::cereal::CarState::ButtonEvent::Type value) {
  _builder.setDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Reader::hasErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader RadarData::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder RadarData::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setErrors( ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder RadarData::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>> RadarData::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader RadarData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder RadarData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder RadarData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>> RadarData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader RadarData::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarData::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarData::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> RadarData::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarData::RadarPoint::Reader::getTrackId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarData::RadarPoint::Builder::getTrackId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setTrackId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYvRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYvRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYvRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::RadarPoint::Reader::getMeasured() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool RadarData::RadarPoint::Builder::getMeasured() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setMeasured(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getGasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getGasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setGasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getBrakeDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getBrakeDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setBrakeDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getSteeringTorqueDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getSteeringTorqueDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setSteeringTorqueDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasCruiseControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasCruiseControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::CruiseControl::Reader CarControl::Reader::getCruiseControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::getCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::CruiseControl::Pipeline CarControl::Pipeline::getCruiseControl() {
  return  ::cereal::CarControl::CruiseControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::initCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptCruiseControl(
    ::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> CarControl::Builder::disownCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasHudControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasHudControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::HUDControl::Reader CarControl::Reader::getHudControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::getHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::HUDControl::Pipeline CarControl::Pipeline::getHudControl() {
  return  ::cereal::CarControl::HUDControl::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setHudControl( ::cereal::CarControl::HUDControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::initHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptHudControl(
    ::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> CarControl::Builder::disownHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasActuators() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuators() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarControl::Reader::getActuators() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::getActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuators() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuators( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::initActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuators(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarControl::Builder::disownActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getRoll() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getRoll() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setRoll(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getPitch() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getPitch() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setPitch(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasActuatorsOutput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuatorsOutput() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarControl::Reader::getActuatorsOutput() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::getActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuatorsOutput() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuatorsOutput( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::initActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuatorsOutput(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarControl::Builder::disownActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getAvailableFulltimeLka() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getAvailableFulltimeLka() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setAvailableFulltimeLka(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getGas() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getGas() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setGas(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSteer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::Actuators::LongControlState CarControl::Actuators::Reader::getLongControlState() const {
  return _reader.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::Actuators::LongControlState CarControl::Actuators::Builder::getLongControlState() {
  return _builder.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setLongControlState( ::cereal::CarControl::Actuators::LongControlState value) {
  _builder.setDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getCancel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getCancel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setCancel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getOverride() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getOverride() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setOverride(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getSpeedOverride() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getSpeedOverride() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setSpeedOverride(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getAccelOverride() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getAccelOverride() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setAccelOverride(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getSpeedVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getSpeedVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSpeedVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::HUDControl::Reader::getSetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::HUDControl::Builder::getSetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLanesVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLanesVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLanesVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeadVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeadVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeadVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Reader::getVisualAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Builder::getVisualAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Reader::getAudibleAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Builder::getAudibleAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasCarFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getEnableGasInterceptor() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableGasInterceptor() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableGasInterceptor(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getPcmCruise() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getPcmCruise() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setPcmCruise(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableCameraDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableCameraDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableCameraDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableDsu() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableDsu() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableDsu(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableApgs() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableApgs() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableApgs(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinEnableSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinEnableSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinEnableSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinSteerSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinSteerSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinSteerSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModelDEPRECATED() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModelDEPRECATED() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModelDEPRECATED( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::Reader::getSafetyParamDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::Builder::getSafetyParamDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyParamDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasSteerMaxBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getSteerMaxBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getSteerMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initSteerMaxBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownSteerMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasSteerMaxV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getSteerMaxV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getSteerMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initSteerMaxV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownSteerMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getGasMaxBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getGasMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initGasMaxBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownGasMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getGasMaxVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getGasMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initGasMaxVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownGasMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getBrakeMaxBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getBrakeMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initBrakeMaxBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownBrakeMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getBrakeMaxVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getBrakeMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initBrakeMaxVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownBrakeMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getMass() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMass() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMass(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getWheelbase() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getWheelbase() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setWheelbase(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getCenterToFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getCenterToFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCenterToFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatioRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatioRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatioRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getRotationalInertia() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getRotationalInertia() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRotationalInertia(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLongitudinalTuning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLongitudinalTuning() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader CarParams::Reader::getLongitudinalTuning() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::getLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline CarParams::Pipeline::getLongitudinalTuning() {
  return  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::initLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLongitudinalTuning(
    ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> CarParams::Builder::disownLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline typename CarParams::LateralTuning::Reader CarParams::Reader::getLateralTuning() const {
  return typename CarParams::LateralTuning::Reader(_reader);
}
inline typename CarParams::LateralTuning::Builder CarParams::Builder::getLateralTuning() {
  return typename CarParams::LateralTuning::Builder(_builder);
}
#if !CAPNP_LITE
inline typename CarParams::LateralTuning::Pipeline CarParams::Pipeline::getLateralTuning() {
  return typename CarParams::LateralTuning::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename CarParams::LateralTuning::Builder CarParams::Builder::initLateralTuning() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<7>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS).clear();
  return typename CarParams::LateralTuning::Builder(_builder);
}
inline bool CarParams::Reader::getSteerLimitAlert() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSteerLimitAlert() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitAlert(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getVEgoStopping() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getVEgoStopping() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setVEgoStopping(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDirectAccelControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDirectAccelControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDirectAccelControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getStoppingControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getStoppingControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStoppingControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStartAccelDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStartAccelDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartAccelDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRateCost() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRateCost() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRateCost(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Reader::getSteerControlType() const {
  return _reader.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Builder::getSteerControlType() {
  return _builder.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerControlType( ::cereal::CarParams::SteerControlType value) {
  _builder.setDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getRadarOffCan() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getRadarOffCan() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRadarOffCan(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerActuatorDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerActuatorDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerActuatorDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getOpenpilotLongitudinalControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getOpenpilotLongitudinalControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setOpenpilotLongitudinalControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarVin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarVin() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarVin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarVin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarVin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarVin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getIsPandaBlackDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getIsPandaBlackDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setIsPandaBlackDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDashcamOnly() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDashcamOnly() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDashcamOnly(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModelPassiveDEPRECATED() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModelPassiveDEPRECATED() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModelPassiveDEPRECATED( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Reader::getTransmissionType() const {
  return _reader.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Builder::getTransmissionType() {
  return _builder.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTransmissionType( ::cereal::CarParams::TransmissionType value) {
  _builder.setDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarFw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFw() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader CarParams::Reader::getCarFw() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::getCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFw( ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::initCarFw(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFw(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>> CarParams::Builder::disownCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getRadarTimeStep() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}

inline float CarParams::Builder::getRadarTimeStep() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}
inline void CarParams::Builder::setRadarTimeStep(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 1028443341u);
}

inline bool CarParams::Reader::getCommunityFeatureDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getCommunityFeatureDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCommunityFeatureDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerLimitTimer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerLimitTimer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitTimer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLateralParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLateralParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralParams::Reader CarParams::Reader::getLateralParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::getLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LateralParams::Pipeline CarParams::Pipeline::getLateralParams() {
  return  ::cereal::CarParams::LateralParams::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLateralParams( ::cereal::CarParams::LateralParams::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::initLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLateralParams(
    ::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> CarParams::Builder::disownLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Reader::getFingerprintSource() const {
  return _reader.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Builder::getFingerprintSource() {
  return _builder.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFingerprintSource( ::cereal::CarParams::FingerprintSource value) {
  _builder.setDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::NetworkLocation CarParams::Reader::getNetworkLocation() const {
  return _reader.getDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::NetworkLocation CarParams::Builder::getNetworkLocation() {
  return _builder.getDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setNetworkLocation( ::cereal::CarParams::NetworkLocation value) {
  _builder.setDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinSpeedCanDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinSpeedCanDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinSpeedCanDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStoppingDecelRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStoppingDecelRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStoppingDecelRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStartingAccelRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStartingAccelRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartingAccelRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMaxSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMaxSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMaxSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getFuzzyFingerprint() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getFuzzyFingerprint() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFuzzyFingerprint(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableBsm() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableBsm() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableBsm(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getHasStockCameraDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getHasStockCameraDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setHasStockCameraDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getLongitudinalActuatorDelayUpperBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getLongitudinalActuatorDelayUpperBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setLongitudinalActuatorDelayUpperBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getVEgoStarting() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getVEgoStarting() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setVEgoStarting(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStopAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStopAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStopAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getLongitudinalActuatorDelayLowerBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getLongitudinalActuatorDelayLowerBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setLongitudinalActuatorDelayLowerBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasSafetyConfigs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSafetyConfigs() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader CarParams::Reader::getSafetyConfigs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::getSafetyConfigs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSafetyConfigs( ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::initSafetyConfigs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSafetyConfigs(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>> CarParams::Builder::disownSafetyConfigs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getWheelSpeedFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getWheelSpeedFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setWheelSpeedFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarParams::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::Reader::getUnsafeMode() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::Builder::getUnsafeMode() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setUnsafeMode( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::SafetyConfig::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::SafetyConfig::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::SafetyConfig::Reader::getSafetyParam() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::SafetyConfig::Builder::getSafetyParam() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyParam( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralParams::Reader::hasTorqueBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralParams::Reader::getTorqueBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::getTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueBP( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::initTorqueBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueBP(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralParams::Builder::disownTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralParams::Reader::hasTorqueV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralParams::Reader::getTorqueV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::getTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueV( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueV(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::initTorqueV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueV(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralParams::Builder::disownTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float CarParams::LateralPIDTuning::Reader::getKf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralPIDTuning::Builder::getKf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralPIDTuning::Builder::setKf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float CarParams::LateralINDITuning::Reader::getOuterLoopGainDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getOuterLoopGainDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getInnerLoopGainDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getInnerLoopGainDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getTimeConstantDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getTimeConstantDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getActuatorEffectivenessDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getActuatorEffectivenessDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralINDITuning::Reader::hasOuterLoopGainBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasOuterLoopGainBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getOuterLoopGainBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getOuterLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initOuterLoopGainBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptOuterLoopGainBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownOuterLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasOuterLoopGainV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasOuterLoopGainV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getOuterLoopGainV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getOuterLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initOuterLoopGainV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptOuterLoopGainV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownOuterLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasInnerLoopGainBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasInnerLoopGainBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getInnerLoopGainBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getInnerLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initInnerLoopGainBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptInnerLoopGainBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownInnerLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasInnerLoopGainV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasInnerLoopGainV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getInnerLoopGainV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getInnerLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initInnerLoopGainV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptInnerLoopGainV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownInnerLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasTimeConstantBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasTimeConstantBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getTimeConstantBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getTimeConstantBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initTimeConstantBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptTimeConstantBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownTimeConstantBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasTimeConstantV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasTimeConstantV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getTimeConstantV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getTimeConstantV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initTimeConstantV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptTimeConstantV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownTimeConstantV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasActuatorEffectivenessBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasActuatorEffectivenessBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getActuatorEffectivenessBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getActuatorEffectivenessBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initActuatorEffectivenessBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptActuatorEffectivenessBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownActuatorEffectivenessBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasActuatorEffectivenessV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasActuatorEffectivenessV() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getActuatorEffectivenessV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getActuatorEffectivenessV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initActuatorEffectivenessV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptActuatorEffectivenessV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownActuatorEffectivenessV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float CarParams::LateralLQRTuning::Reader::getScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getKi() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getKi() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setKi(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getDcGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getDcGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setDcGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralLQRTuning::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setA(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasB() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasB() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getB() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setB( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setB(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initB(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptB(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasC() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasK() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasK() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getK() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setK( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setK(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initK(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptK(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasL() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasL() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getL() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setL( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setL(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initL(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptL(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Reader::getEcu() const {
  return _reader.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Builder::getEcu() {
  return _builder.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setEcu( ::cereal::CarParams::Ecu value) {
  _builder.setDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::hasFwVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::CarFw::Builder::hasFwVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CarParams::CarFw::Reader::getFwVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::getFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::CarFw::Builder::setFwVersion( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::initFwVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::CarFw::Builder::adoptFwVersion(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CarParams::CarFw::Builder::disownFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t CarParams::CarFw::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::CarFw::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CarParams::CarFw::Reader::getSubAddress() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CarParams::CarFw::Builder::getSubAddress() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setSubAddress( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::LateralTuning::Reader::isPid() const {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Builder::isPid() {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Reader::hasPid() const {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasPid() {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralPIDTuning::Reader CarParams::LateralTuning::Reader::getPid() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::getPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setPid( ::cereal::CarParams::LateralPIDTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::initPid() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptPid(
    ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> CarParams::LateralTuning::Builder::disownPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isIndi() const {
  return which() == CarParams::LateralTuning::INDI;
}
inline bool CarParams::LateralTuning::Builder::isIndi() {
  return which() == CarParams::LateralTuning::INDI;
}
inline bool CarParams::LateralTuning::Reader::hasIndi() const {
  if (which() != CarParams::LateralTuning::INDI) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasIndi() {
  if (which() != CarParams::LateralTuning::INDI) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralINDITuning::Reader CarParams::LateralTuning::Reader::getIndi() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::getIndi() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setIndi( ::cereal::CarParams::LateralINDITuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::initIndi() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptIndi(
    ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> CarParams::LateralTuning::Builder::disownIndi() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isLqr() const {
  return which() == CarParams::LateralTuning::LQR;
}
inline bool CarParams::LateralTuning::Builder::isLqr() {
  return which() == CarParams::LateralTuning::LQR;
}
inline bool CarParams::LateralTuning::Reader::hasLqr() const {
  if (which() != CarParams::LateralTuning::LQR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasLqr() {
  if (which() != CarParams::LateralTuning::LQR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralLQRTuning::Reader CarParams::LateralTuning::Reader::getLqr() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::getLqr() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setLqr( ::cereal::CarParams::LateralLQRTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::initLqr() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptLqr(
    ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> CarParams::LateralTuning::Builder::disownLqr() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

}  // namespace

